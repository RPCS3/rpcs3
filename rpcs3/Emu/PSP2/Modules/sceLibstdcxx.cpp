#include "stdafx.h"
#include "Emu/System.h"
#include "Emu/PSP2/ARMv7Module.h"

#include "sceLibstdcxx.h"

logs::channel sceLibstdcxx("sceLibstdcxx");

namespace sce_libstdcxx_func
{
	void __aeabi_unwind_cpp_pr0()
	{
		fmt::throw_exception("Unimplemented" HERE);
	}

	void __aeabi_unwind_cpp_pr1()
	{
		fmt::throw_exception("Unimplemented" HERE);
	}

	void __aeabi_unwind_cpp_pr2()
	{
		fmt::throw_exception("Unimplemented" HERE);
	}
}

// TODO: find and set correct original mangled name. Currently ignored.
// Example of correct usage: REG_FUNC(0xAE71DC3, operator_new_nothrow, "_ZnwjRKSt9nothrow_t");
#define REG_FUNC(nid, name, orig_name) REG_FNID(SceLibstdcxx, nid, sce_libstdcxx_func::name)

DECLARE(arm_module_manager::SceLibstdcxx)("SceLibstdcxx", []()
{
	//REG_FUNC(0x52B0C625, std::bad_typeid::what() const);
	//REG_FUNC(0x64D7D074, std::bad_typeid::_Doraise() const);
	//REG_FUNC(0x15FB88E2, std::logic_error::what() const);
	//REG_FUNC(0x492D1209, std::logic_error::_Doraise() const);
	//REG_FUNC(0xDBDFF9D0, std::range_error::_Doraise() const);
	//REG_FUNC(0xE8D59AB5, std::_String_base::_Xlen() const);
	//REG_FUNC(0x473DC636, std::_String_base::_Xran() const);
	//REG_FUNC(0x481ECB76, std::domain_error::_Doraise() const);
	//REG_FUNC(0xB03E909C, std::length_error::_Doraise() const);
	//REG_FUNC(0x38CF41AC, std::out_of_range::_Doraise() const);
	//REG_FUNC(0x55AE5502, std::_codecvt_base::do_encoding() const);
	//REG_FUNC(0x5522293F, std::_codecvt_base::do_max_length() const);
	//REG_FUNC(0xCF5643A9, std::_codecvt_base::do_always_noconv() const);
	//REG_FUNC(0x51FCD56B, std::bad_exception::what() const);
	//REG_FUNC(0x109E54C9, std::bad_exception::_Doraise() const);
	//REG_FUNC(0xAE85C2EE, std::runtime_error::what() const);
	//REG_FUNC(0x1D878503, std::runtime_error::_Doraise() const);
	//REG_FUNC(0xEED101C6, std::overflow_error::_Doraise() const);
	//REG_FUNC(0xB1AE6F9E, std::underflow_error::_Doraise() const);
	//REG_FUNC(0x16F56E8D, std::invalid_argument::_Doraise() const);
	//REG_FUNC(0x6C568D20, std::_ctype<char>::do_tolower(char*, char const*) const);
	//REG_FUNC(0xC334DE66, std::_ctype<char>::do_tolower(char) const);
	//REG_FUNC(0x02DD808E, std::_ctype<char>::do_toupper(char*, char const*) const);
	//REG_FUNC(0xF6AF33EA, std::_ctype<char>::do_toupper(char) const);
	//REG_FUNC(0x1B81D726, std::_ctype<char>::do_widen(char const*, char const*, char*) const);
	//REG_FUNC(0x6471CC01, std::_ctype<char>::do_widen(char) const);
	//REG_FUNC(0x9CFA56E5, std::_ctype<char>::do_narrow(char const*, char const*, char, char*) const);
	//REG_FUNC(0x718669AB, std::_ctype<char>::do_narrow(char, char) const);
	//REG_FUNC(0x759F105D, std::_ctype<wchar_t>::do_scan_is(short, wchar_t const*, wchar_t const*) const);
	//REG_FUNC(0x0056443F, std::_ctype<wchar_t>::do_tolower(wchar_t*, wchar_t const*) const);
	//REG_FUNC(0x33E9ECDD, std::_ctype<wchar_t>::do_tolower(wchar_t) const);
	//REG_FUNC(0x1256E6A5, std::_ctype<wchar_t>::do_toupper(wchar_t*, wchar_t const*) const);
	//REG_FUNC(0x64072C2E, std::_ctype<wchar_t>::do_toupper(wchar_t) const);
	//REG_FUNC(0x339766BF, std::_ctype<wchar_t>::do_scan_not(short, wchar_t const*, wchar_t const*) const);
	//REG_FUNC(0xDA4E1651, std::_ctype<wchar_t>::do_is(wchar_t const*, wchar_t const*, short*) const);
	//REG_FUNC(0x5A06C0E8, std::_ctype<wchar_t>::do_is(short, wchar_t) const);
	//REG_FUNC(0x609036C7, std::_ctype<wchar_t>::do_widen(char const*, char const*, wchar_t*) const);
	//REG_FUNC(0xA2896AA8, std::_ctype<wchar_t>::do_widen(char) const);
	//REG_FUNC(0x631687B9, std::_ctype<wchar_t>::do_narrow(wchar_t const*, wchar_t const*, char, char*) const);
	//REG_FUNC(0xB4D8D2F0, std::_ctype<wchar_t>::do_narrow(wchar_t, char) const);
	//REG_FUNC(0xD9070137, std::_codecvt<char, char, std::_Mbstatet>::do_unshift(std::_Mbstatet&, char*, char*, char*&) const);
	//REG_FUNC(0xABA0412F, std::_codecvt<char, char, std::_Mbstatet>::do_in(std::_Mbstatet&, char const*, char const*, char const*&, char*, char*, char*&) const);
	//REG_FUNC(0x51052F04, std::_codecvt<char, char, std::_Mbstatet>::do_out(std::_Mbstatet&, char const*, char const*, char const*&, char*, char*, char*&) const);
	//REG_FUNC(0x39F062BE, std::_codecvt<char, char, std::_Mbstatet>::do_length(std::_Mbstatet const&, char const*, char const*, unsigned int) const);
	//REG_FUNC(0xF07CC89F, std::_codecvt<wchar_t, char, std::_Mbstatet>::do_unshift(std::_Mbstatet&, char*, char*, char*&) const);
	//REG_FUNC(0xF3A2E837, std::_codecvt<wchar_t, char, std::_Mbstatet>::do_encoding() const);
	//REG_FUNC(0x1F133D1E, std::_codecvt<wchar_t, char, std::_Mbstatet>::do_max_length() const);
	//REG_FUNC(0x27716D17, std::_codecvt<wchar_t, char, std::_Mbstatet>::do_always_noconv() const);
	//REG_FUNC(0x1C1AFE42, std::_codecvt<wchar_t, char, std::_Mbstatet>::do_in(std::_Mbstatet&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const);
	//REG_FUNC(0xCBDE5500, std::_codecvt<wchar_t, char, std::_Mbstatet>::do_out(std::_Mbstatet&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const);
	//REG_FUNC(0xF4D38990, std::_codecvt<wchar_t, char, std::_Mbstatet>::do_length(std::_Mbstatet const&, char const*, char const*, unsigned int) const);
	//REG_FUNC(0x46A9143F, std::bad_cast::what() const);
	//REG_FUNC(0x8D129D3F, std::bad_cast::_Doraise() const);
	//REG_FUNC(0xF877F51E, std::ios_base::failure::_Doraise() const);
	//REG_FUNC(0x664750EE, std::bad_alloc::what() const);
	//REG_FUNC(0xBA89FBE7, std::bad_alloc::_Doraise() const);
	//REG_FUNC(0xC133E331, std::exception::what() const);
	//REG_FUNC(0x0656BE32, std::exception::_Raise() const);
	//REG_FUNC(0x47A5CDA2, std::exception::_Doraise() const);
	//REG_FUNC(0xBAE38DF9, std::type_info::name() const);
	//REG_FUNC(0x1F260F10, std::type_info::before(std::type_info const&) const);
	//REG_FUNC(0xDB15F0FC, std::type_info::operator==(std::type_info const&) const);
	//REG_FUNC(0x9994F9FE, std::type_info::operator!=(std::type_info const&) const);
	//REG_FUNC(0x2DA9FCEC, std::basic_iostream<char, std::char_traits<char> >::~basic_iostream());
	//REG_FUNC(0x6C2D3707, std::basic_iostream<char, std::char_traits<char> >::~basic_iostream());
	//REG_FUNC(0x9BA8786E, std::basic_istream<char, std::char_traits<char> >::~basic_istream());
	//REG_FUNC(0xD089A7C9, std::basic_istream<char, std::char_traits<char> >::~basic_istream());
	//REG_FUNC(0x3EE0611A, std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::basic_streambuf<char, std::char_traits<char> >*, bool));
	//REG_FUNC(0x6489E51D, std::basic_ostream<char, std::char_traits<char> >::~basic_ostream());
	//REG_FUNC(0xEF21C386, std::basic_ostream<char, std::char_traits<char> >::~basic_ostream());
	//REG_FUNC(0x10D794D4, std::string::_Grow(unsigned int, bool));
	//REG_FUNC(0x846D0286, std::string::assign(std::string const&, unsigned int, unsigned int));
	//REG_FUNC(0x2AF7786D, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*));
	//REG_FUNC(0x92F661CF, std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&));
	//REG_FUNC(0xECC3B9C2, std::bad_typeid::bad_typeid(std::bad_typeid const&));
	//REG_FUNC(0x9F4CD196, std::bad_typeid::bad_typeid());
	//REG_FUNC(0x7AE1631B, std::bad_typeid::bad_typeid(std::bad_typeid const&));
	//REG_FUNC(0x33377802, std::bad_typeid::bad_typeid());
	//REG_FUNC(0x2CE020C7, std::bad_typeid::~bad_typeid());
	//REG_FUNC(0x625460B9, std::bad_typeid::~bad_typeid());
	//REG_FUNC(0xB4F5C5A7, std::bad_typeid::~bad_typeid());
	//REG_FUNC(0x55AAD6A6, std::bad_typeid::operator=(std::bad_typeid const&));
	//REG_FUNC(0x9CF31703, std::istrstream::~istrstream());
	//REG_FUNC(0x71D13A36, std::istrstream::~istrstream());
	//REG_FUNC(0xAF5DF8C3, std::istrstream::~istrstream());
	//REG_FUNC(0x0C1E7C7A, std::ostrstream::ostrstream(char*, int, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0x0C09B290, std::ostrstream::ostrstream(char*, int, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0x4B8BA644, std::ostrstream::~ostrstream());
	//REG_FUNC(0x0E463FB3, std::ostrstream::~ostrstream());
	//REG_FUNC(0xA0A34FEF, std::ostrstream::~ostrstream());
	//REG_FUNC(0xC9F632FF, std::logic_error::logic_error(std::logic_error const&));
	//REG_FUNC(0xE6356C5C, std::logic_error::logic_error(std::string const&));
	//REG_FUNC(0x6322FEB0, std::logic_error::~logic_error());
	//REG_FUNC(0x35ED9C5A, std::logic_error::~logic_error());
	//REG_FUNC(0x1FFC4420, std::logic_error::~logic_error());
	//REG_FUNC(0x6F6E3A52, std::range_error::range_error(std::range_error const&));
	//REG_FUNC(0xFD97D28A, std::range_error::~range_error());
	//REG_FUNC(0x1C86405F, std::range_error::~range_error());
	//REG_FUNC(0xEF754EBD, std::range_error::~range_error());
	//REG_FUNC(0x7D5412EF, std::domain_error::domain_error(std::domain_error const&));
	//REG_FUNC(0x803A7D3E, std::domain_error::~domain_error());
	//REG_FUNC(0xA6BCA2AD, std::domain_error::~domain_error());
	//REG_FUNC(0x036F9D2A, std::domain_error::~domain_error());
	//REG_FUNC(0x5F3428AD, std::length_error::length_error(std::length_error const&));
	//REG_FUNC(0xF6FB801D, std::length_error::length_error(std::string const&));
	//REG_FUNC(0xF83AA7DA, std::length_error::~length_error());
	//REG_FUNC(0xA873D7F9, std::length_error::~length_error());
	//REG_FUNC(0x0BB12C75, std::length_error::~length_error());
	//REG_FUNC(0x299AA587, std::out_of_range::out_of_range(std::out_of_range const&));
	//REG_FUNC(0xC8BA5522, std::out_of_range::out_of_range(std::string const&));
	//REG_FUNC(0xA8C470A4, std::out_of_range::~out_of_range());
	//REG_FUNC(0x5FAE79BF, std::out_of_range::~out_of_range());
	//REG_FUNC(0x7908CBAB, std::out_of_range::~out_of_range());
	//REG_FUNC(0xDCCE6368, std::strstreambuf::_Init(int, char*, char*, int));
	//REG_FUNC(0xD85AE271, std::strstreambuf::_Tidy());
	//REG_FUNC(0xD189E6CC, std::strstreambuf::freeze(bool));
	//REG_FUNC(0xFA6BDF33, std::strstreambuf::seekoff(long, std::_Iosb<int>::_Seekdir, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0x97A9813A, std::strstreambuf::seekpos(std::fpos<std::_Mbstatet>, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0xED2539E2, std::strstreambuf::overflow(int));
	//REG_FUNC(0xC725F896, std::strstreambuf::pbackfail(int));
	//REG_FUNC(0xA9F4FABF, std::strstreambuf::underflow());
	//REG_FUNC(0x1C887DDE, std::strstreambuf::~strstreambuf());
	//REG_FUNC(0x29E1E930, std::strstreambuf::~strstreambuf());
	//REG_FUNC(0x0A140889, std::strstreambuf::~strstreambuf());
	//REG_FUNC(0xA8FE6FC4, std::_codecvt_base::~_codecvt_base());
	//REG_FUNC(0xB0E47AE4, std::_codecvt_base::~_codecvt_base());
	//REG_FUNC(0xB7EE9CC2, std::bad_exception::bad_exception(std::bad_exception const&));
	//REG_FUNC(0xD719280E, std::bad_exception::bad_exception());
	//REG_FUNC(0x37D2017F, std::bad_exception::bad_exception(std::bad_exception const&));
	//REG_FUNC(0x3DE54D83, std::bad_exception::bad_exception());
	//REG_FUNC(0xC7880D1A, std::bad_exception::~bad_exception());
	//REG_FUNC(0x486B59CE, std::bad_exception::~bad_exception());
	//REG_FUNC(0xD04E0BAB, std::bad_exception::~bad_exception());
	//REG_FUNC(0x792097AA, std::bad_exception::operator=(std::bad_exception const&));
	//REG_FUNC(0xCC369863, std::basic_filebuf<char, std::char_traits<char> >::sync());
	//REG_FUNC(0xC8BAB41E, std::basic_filebuf<char, std::char_traits<char> >::_Lock());
	//REG_FUNC(0xD5F03A74, std::basic_filebuf<char, std::char_traits<char> >::uflow());
	//REG_FUNC(0x413E813E, std::basic_filebuf<char, std::char_traits<char> >::setbuf(char*, int));
	//REG_FUNC(0x9D193B65, std::basic_filebuf<char, std::char_traits<char> >::_Unlock());
	//REG_FUNC(0x52E47FB5, std::basic_filebuf<char, std::char_traits<char> >::seekoff(long, std::_Iosb<int>::_Seekdir, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0x0E119B37, std::basic_filebuf<char, std::char_traits<char> >::seekpos(std::fpos<std::_Mbstatet>, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0x616754BC, std::basic_filebuf<char, std::char_traits<char> >::overflow(int));
	//REG_FUNC(0xCD5BD2E1, std::basic_filebuf<char, std::char_traits<char> >::_Endwrite());
	//REG_FUNC(0xFC1C7F3A, std::basic_filebuf<char, std::char_traits<char> >::pbackfail(int));
	//REG_FUNC(0x31693B42, std::basic_filebuf<char, std::char_traits<char> >::underflow());
	//REG_FUNC(0xC2F03DFD, std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf());
	//REG_FUNC(0x54A77A0D, std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf());
	//REG_FUNC(0x253888BD, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::sync());
	//REG_FUNC(0x4EC524DC, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_Lock());
	//REG_FUNC(0xE777348C, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::uflow());
	//REG_FUNC(0x1E1E8BBF, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::setbuf(wchar_t*, int));
	//REG_FUNC(0x281D0191, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_Unlock());
	//REG_FUNC(0x9C87B03F, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::seekoff(long, std::_Iosb<int>::_Seekdir, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0x8021D69B, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::seekpos(std::fpos<std::_Mbstatet>, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0xD8127E0A, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::overflow(unsigned int));
	//REG_FUNC(0x99FDEB76, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_Endwrite());
	//REG_FUNC(0x950786D7, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::pbackfail(unsigned int));
	//REG_FUNC(0x572A65D3, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::underflow());
	//REG_FUNC(0x96D09EA4, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::~basic_filebuf());
	//REG_FUNC(0xD434F085, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::~basic_filebuf());
	//REG_FUNC(0xFFFA683E, std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream());
	//REG_FUNC(0xB58839C5, std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream());
	//REG_FUNC(0x9BF8855B, std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*, bool));
	//REG_FUNC(0x0D74F56E, std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream());
	//REG_FUNC(0x9B831B60, std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream());
	//REG_FUNC(0x396337CE, std::runtime_error::runtime_error(std::runtime_error const&));
	//REG_FUNC(0xDAD26367, std::runtime_error::~runtime_error());
	//REG_FUNC(0x7F1FDAEA, std::runtime_error::~runtime_error());
	//REG_FUNC(0xECC19AEB, std::runtime_error::~runtime_error());
	//REG_FUNC(0xE67F3768, std::overflow_error::overflow_error(std::overflow_error const&));
	//REG_FUNC(0xF7C46A5D, std::overflow_error::~overflow_error());
	//REG_FUNC(0x5C666F7E, std::overflow_error::~overflow_error());
	//REG_FUNC(0x4E45F680, std::overflow_error::~overflow_error());
	//REG_FUNC(0x626515E3, std::basic_streambuf<char, std::char_traits<char> >::sync());
	//REG_FUNC(0x2E55F15A, std::basic_streambuf<char, std::char_traits<char> >::_Lock());
	//REG_FUNC(0x0F8535AB, std::basic_streambuf<char, std::char_traits<char> >::uflow());
	//REG_FUNC(0xD7933D06, std::basic_streambuf<char, std::char_traits<char> >::setbuf(char*, int));
	//REG_FUNC(0xB8BCCC8D, std::basic_streambuf<char, std::char_traits<char> >::xsgetn(char*, int));
	//REG_FUNC(0x43E5D0F1, std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, int));
	//REG_FUNC(0x149B193A, std::basic_streambuf<char, std::char_traits<char> >::_Unlock());
	//REG_FUNC(0x600998EC, std::basic_streambuf<char, std::char_traits<char> >::seekoff(long, std::_Iosb<int>::_Seekdir, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0x01DEFFD6, std::basic_streambuf<char, std::char_traits<char> >::seekpos(std::fpos<std::_Mbstatet>, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0xF5F44352, std::basic_streambuf<char, std::char_traits<char> >::overflow(int));
	//REG_FUNC(0xCA79344F, std::basic_streambuf<char, std::char_traits<char> >::pbackfail(int));
	//REG_FUNC(0x441788B1, std::basic_streambuf<char, std::char_traits<char> >::showmanyc());
	//REG_FUNC(0x797DAE94, std::basic_streambuf<char, std::char_traits<char> >::underflow());
	//REG_FUNC(0x074AD52E, std::basic_streambuf<char, std::char_traits<char> >::~basic_streambuf());
	//REG_FUNC(0xE449E2BF, std::basic_streambuf<char, std::char_traits<char> >::~basic_streambuf());
	//REG_FUNC(0x09FAA0AA, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sync());
	//REG_FUNC(0xA596C88C, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::_Lock());
	//REG_FUNC(0x373C2CD8, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::uflow());
	//REG_FUNC(0x3F363796, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::setbuf(wchar_t*, int));
	//REG_FUNC(0xABE96E40, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::xsgetn(wchar_t*, int));
	//REG_FUNC(0x506D0DAE, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::xsputn(wchar_t const*, int));
	//REG_FUNC(0xBD378207, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::_Unlock());
	//REG_FUNC(0x924BD940, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::seekoff(long, std::_Iosb<int>::_Seekdir, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0x2CD1C1AF, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::seekpos(std::fpos<std::_Mbstatet>, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0xB0DD9881, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::overflow(unsigned int));
	//REG_FUNC(0xDD04652F, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pbackfail(unsigned int));
	//REG_FUNC(0x9DCBD6A5, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::showmanyc());
	//REG_FUNC(0xC3892DE5, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::underflow());
	//REG_FUNC(0x8DFACE66, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::~basic_streambuf());
	//REG_FUNC(0x868E865C, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::~basic_streambuf());
	//REG_FUNC(0x9A59BC50, std::underflow_error::underflow_error(std::underflow_error const&));
	//REG_FUNC(0x47A589A4, std::underflow_error::~underflow_error());
	//REG_FUNC(0xCED74DE7, std::underflow_error::~underflow_error());
	//REG_FUNC(0xA76F038A, std::underflow_error::~underflow_error());
	//REG_FUNC(0x6332FA62, std::invalid_argument::invalid_argument(std::invalid_argument const&));
	//REG_FUNC(0x188D86CF, std::invalid_argument::~invalid_argument());
	//REG_FUNC(0x9982A4FC, std::invalid_argument::~invalid_argument());
	//REG_FUNC(0x1AB2B1AC, std::invalid_argument::~invalid_argument());
	//REG_FUNC(0xF9FAB558, std::_Mutex::_Lock());
	//REG_FUNC(0x0402C9F8, std::_Mutex::_Unlock());
	//REG_FUNC(0x9DA92617, std::_Mutex::_Mutex(std::_Uninitialized));
	//REG_FUNC(0xA4F99AE7, std::_Mutex::_Mutex());
	//REG_FUNC(0x7B5A6B7F, std::_Mutex::_Mutex(std::_Uninitialized));
	//REG_FUNC(0x5C5CD6B9, std::_Mutex::_Mutex());
	//REG_FUNC(0x9B37CAD9, std::_Mutex::~_Mutex());
	//REG_FUNC(0x3E6A67FE, std::_Mutex::~_Mutex());
	//REG_FUNC(0xABB11CF9, std::_Winit::_Winit());
	//REG_FUNC(0x90DD73C3, std::_Winit::_Winit());
	//REG_FUNC(0x579C349B, std::_Winit::~_Winit());
	//REG_FUNC(0x3794ED15, std::_Winit::~_Winit());
	//REG_FUNC(0x24DA6258, std::_ctype<char>::~_ctype());
	//REG_FUNC(0xF9C92C6A, std::_ctype<char>::~_ctype());
	//REG_FUNC(0x554E4742, std::_ctype<wchar_t>::~_ctype());
	//REG_FUNC(0xD4AEA4D3, std::_ctype<wchar_t>::~_ctype());
	//REG_FUNC(0x5A7D89F0, std::_codecvt<char, char, std::_Mbstatet>::~_codecvt());
	//REG_FUNC(0xB613F281, std::_codecvt<char, char, std::_Mbstatet>::~_codecvt());
	//REG_FUNC(0x1E11185A, std::_codecvt<wchar_t, char, std::_Mbstatet>::~_codecvt());
	//REG_FUNC(0x14125DF4, std::_codecvt<wchar_t, char, std::_Mbstatet>::~_codecvt());
	//REG_FUNC(0xD2A4428D, std::bad_cast::bad_cast(std::bad_cast const&));
	//REG_FUNC(0x7922CC7C, std::bad_cast::bad_cast());
	//REG_FUNC(0x6DC64647, std::bad_cast::bad_cast(std::bad_cast const&));
	//REG_FUNC(0x596BA786, std::bad_cast::bad_cast());
	//REG_FUNC(0x5416699C, std::bad_cast::~bad_cast());
	//REG_FUNC(0x1D09710D, std::bad_cast::~bad_cast());
	//REG_FUNC(0x3C6B52E7, std::bad_cast::~bad_cast());
	//REG_FUNC(0x95966020, std::bad_cast::operator=(std::bad_cast const&));
	//REG_FUNC(0xF81D3B86, std::ios_base::register_callback(void (*)(std::ios_base::event, std::ios_base&, int), int));
	//REG_FUNC(0x5E60B2B3, std::ios_base::Init::Init());
	//REG_FUNC(0x5ED60DEE, std::ios_base::Init::Init());
	//REG_FUNC(0x65D88619, std::ios_base::Init::~Init());
	//REG_FUNC(0x3483E01D, std::ios_base::Init::~Init());
	//REG_FUNC(0x78CB190E, std::ios_base::_Init());
	//REG_FUNC(0x023B8BEE, std::ios_base::_Tidy());
	//REG_FUNC(0xC9DE8208, std::ios_base::clear(std::_Iosb<int>::_Iostate, bool));
	//REG_FUNC(0xAA9171FB, std::ios_base::_Addstd());
	//REG_FUNC(0x0FC58778, std::ios_base::copyfmt(std::ios_base const&));
	//REG_FUNC(0x2DF76755, std::ios_base::failure::failure(std::ios_base::failure const&));
	//REG_FUNC(0x094048F7, std::ios_base::failure::failure(std::string const&));
	//REG_FUNC(0x20AAAB95, std::ios_base::failure::~failure());
	//REG_FUNC(0x31D0197A, std::ios_base::failure::~failure());
	//REG_FUNC(0x7736E940, std::ios_base::_Callfns(std::ios_base::event));
	//REG_FUNC(0xE8C4640A, std::ios_base::_Findarr(int));
	//REG_FUNC(0xB8CFFB8D, std::ios_base::~ios_base());
	//REG_FUNC(0x40EA90D5, std::ios_base::~ios_base());
	//REG_FUNC(0xDCE89E71, std::ios_base::~ios_base());
	//REG_FUNC(0xE15EEC2A, std::bad_alloc::bad_alloc(std::bad_alloc const&));
	//REG_FUNC(0xEC3804D2, std::bad_alloc::bad_alloc());
	//REG_FUNC(0x6AF75467, std::bad_alloc::bad_alloc(std::bad_alloc const&));
	//REG_FUNC(0x57096162, std::bad_alloc::bad_alloc());
	//REG_FUNC(0xB2DAA408, std::bad_alloc::~bad_alloc());
	//REG_FUNC(0x07AEE736, std::bad_alloc::~bad_alloc());
	//REG_FUNC(0xA9E9B7B7, std::bad_alloc::~bad_alloc());
	//REG_FUNC(0x7853E8E5, std::bad_alloc::operator=(std::bad_alloc const&));
	//REG_FUNC(0xF78468EB, std::basic_ios<char, std::char_traits<char> >::~basic_ios());
	//REG_FUNC(0x03150182, std::basic_ios<char, std::char_traits<char> >::~basic_ios());
	//REG_FUNC(0x9654168A, std::basic_ios<wchar_t, std::char_traits<wchar_t> >::~basic_ios());
	//REG_FUNC(0x8FFB8524, std::basic_ios<wchar_t, std::char_traits<wchar_t> >::~basic_ios());
	//REG_FUNC(0x7AF1BB16, std::exception::_Set_raise_handler(void (*)(std::exception const&)));
	//REG_FUNC(0x8C5A4417, std::exception::exception(std::exception const&));
	//REG_FUNC(0xFC169D71, std::exception::exception());
	//REG_FUNC(0x59758E74, std::exception::exception(std::exception const&));
	//REG_FUNC(0x00E08376, std::exception::exception());
	//REG_FUNC(0x82EEA67E, std::exception::~exception());
	//REG_FUNC(0x30405D88, std::exception::~exception());
	//REG_FUNC(0xAF7A7081, std::exception::~exception());
	//REG_FUNC(0x6CE63118, std::exception::operator=(std::exception const&));
	//REG_FUNC(0x911F5A80, std::strstream::strstream(char*, int, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0x27166DDA, std::strstream::strstream(char*, int, std::_Iosb<int>::_Openmode));
	//REG_FUNC(0xC4099868, std::strstream::~strstream());
	//REG_FUNC(0x98BD8AE1, std::strstream::~strstream());
	//REG_FUNC(0x7D8DFE43, std::strstream::~strstream());
	//REG_FUNC(0x8D4B1A13, std::type_info::~type_info());
	//REG_FUNC(0xBD786240, std::type_info::~type_info());
	//REG_FUNC(0x00C04303, std::type_info::~type_info());
	//REG_FUNC(0x9983D8B9, std::unexpected());
	//REG_FUNC(0x385D19B2, std::setiosflags(std::_Iosb<int>::_Fmtflags));
	//REG_FUNC(0xD8A78A61, std::setprecision(int));
	//REG_FUNC(0x994DDF94, std::resetiosflags(std::_Iosb<int>::_Fmtflags));
	//REG_FUNC(0x13BAEE11, std::set_terminate(void (*)()));
	//REG_FUNC(0x644CBAA2, std::_Debug_message(char const*, char const*));
	//REG_FUNC(0x9B2F0CA6, std::set_unexpected(void (*)()));
	//REG_FUNC(0xC107B555, std::set_new_handler(void (*)()));
	//REG_FUNC(0x011CEB00, std::uncaught_exception());
	//REG_FUNC(0x36282336, std::__gen_dummy_typeinfos());
	//REG_FUNC(0x3622003F, std::setw(int));
	//REG_FUNC(0x6CAFA8EF, std::_Throw(std::exception const&));
	//REG_FUNC(0xFD276300, std::_Fiopen(char const*, std::_Iosb<int>::_Openmode, int));
	//REG_FUNC(0x1419E1DF, std::_Fiopen(wchar_t const*, std::_Iosb<int>::_Openmode, int));
	//REG_FUNC(0x39587D21, std::setbase(int));
	//REG_FUNC(0x978EC4DC, std::terminate());
	//REG_FUNC(0x4A804953, non-virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream());
	//REG_FUNC(0xABFBB0B4, non-virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream());
	//REG_FUNC(0x6577F8FA, non-virtual thunk to std::strstream::~strstream());
	//REG_FUNC(0x77812119, non-virtual thunk to std::strstream::~strstream());
	//REG_FUNC(0xE4BD5E6A, virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream());
	//REG_FUNC(0x1081224F, virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream());
	//REG_FUNC(0x7CC8951D, virtual thunk to std::basic_istream<char, std::char_traits<char> >::~basic_istream());
	//REG_FUNC(0xC46CA5C9, virtual thunk to std::basic_istream<char, std::char_traits<char> >::~basic_istream());
	//REG_FUNC(0x699E7717, virtual thunk to std::basic_ostream<char, std::char_traits<char> >::~basic_ostream());
	//REG_FUNC(0x41DBA7E0, virtual thunk to std::basic_ostream<char, std::char_traits<char> >::~basic_ostream());
	//REG_FUNC(0x6FC84131, virtual thunk to std::istrstream::~istrstream());
	//REG_FUNC(0x7B4D8616, virtual thunk to std::istrstream::~istrstream());
	//REG_FUNC(0xD82D58BA, virtual thunk to std::ostrstream::~ostrstream());
	//REG_FUNC(0x5D4F7F7B, virtual thunk to std::ostrstream::~ostrstream());
	//REG_FUNC(0x10E7966F, virtual thunk to std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream());
	//REG_FUNC(0xC3718A8D, virtual thunk to std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream());
	//REG_FUNC(0x159261D1, virtual thunk to std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream());
	//REG_FUNC(0xB54EC1E5, virtual thunk to std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream());
	//REG_FUNC(0x2FB87ED7, virtual thunk to std::strstream::~strstream());
	//REG_FUNC(0xECEDE119, virtual thunk to std::strstream::~strstream());
	//REG_FUNC(0x91B0DC47, operator delete[](void*));
	//REG_FUNC(0xA7241F09, operator delete[](void*, std::nothrow_t const&));
	//REG_FUNC(0x3688FFDA, operator delete[](void*, void*));
	//REG_FUNC(0x72293931, operator delete(void*));
	//REG_FUNC(0x87EF85FF, operator delete(void*, std::nothrow_t const&));
	//REG_FUNC(0x1EB89099, operator delete(void*, void*));
	//REG_FUNC(0xE7FB2BF4, operator new[](unsigned int));
	//REG_FUNC(0x31C62481, operator new[](unsigned int, std::nothrow_t const&));
	//REG_FUNC(0xF99ED5AC, operator new(unsigned int));
	//REG_FUNC(0x0AE71DC3, operator new(unsigned int, std::nothrow_t const&));
	//REG_FUNC(0x1818C323, _SNC_get_global_vars);
	//REG_FUNC(0x2CFA1F15, _SNC_get_tlocal_vars);
	//REG_FUNC(0x7742D916, _Unwind_Backtrace);
	//REG_FUNC(0x32748B78, _Unwind_Complete);
	//REG_FUNC(0xF6EA5CDE, _Unwind_DeleteException);
	//REG_FUNC(0xCCD903C4, _Unwind_RaiseException);
	//REG_FUNC(0x13D5D5A1, _Unwind_Resume);
	//REG_FUNC(0xE7889A5B, _Unwind_VRS_Get);
	//REG_FUNC(0xF106D050, _Unwind_VRS_Pop);
	//REG_FUNC(0x91CDA2F9, _Unwind_VRS_Set);
	REG_FUNC(0x173E7421, __aeabi_unwind_cpp_pr0, "__aeabi_unwind_cpp_pr0");
	REG_FUNC(0x3C78DDE3, __aeabi_unwind_cpp_pr1, "__aeabi_unwind_cpp_pr1");
	REG_FUNC(0xF95BDD36, __aeabi_unwind_cpp_pr2, "__aeabi_unwind_cpp_pr2");
	//REG_FUNC(0x8C93EFDA, __cxa_allocate_exception);
	//REG_FUNC(0x6165EE89, __cxa_begin_catch);
	//REG_FUNC(0x5D74285C, __cxa_begin_cleanup);
	//REG_FUNC(0x4E4CC399, __cxa_call_terminate);
	//REG_FUNC(0x7C1A0217, __cxa_call_unexpected);
	//REG_FUNC(0xF7BF277C, __cxa_current_exception_type);
	//REG_FUNC(0x3438F773, __cxa_end_catch);
	//REG_FUNC(0xD7C1E113, __cxa_end_cleanup);
	//REG_FUNC(0x1FFD5FFF, __cxa_free_exception);
	//REG_FUNC(0xBFFC0ED7, __cxa_get_exception_ptr);
	//REG_FUNC(0x96656BBA, __cxa_get_globals);
	//REG_FUNC(0x21D6C279, __cxa_rethrow);
	//REG_FUNC(0xF87E6098, __cxa_throw);
	//REG_FUNC(0x30D908F2, __cxa_type_match);
	//REG_FUNC(0xAE42C1D5, __snc_personality_v0);
	//REG_FUNC(0xDD200A6F, __cxxabiv1::__enum_type_info::~__enum_type_info());
	//REG_FUNC(0x436D61AD, __cxxabiv1::__enum_type_info::~__enum_type_info());
	//REG_FUNC(0x34854DA4, __cxxabiv1::__enum_type_info::~__enum_type_info());
	//REG_FUNC(0x9D5EDD21, __cxxabiv1::__array_type_info::~__array_type_info());
	//REG_FUNC(0xD6375908, __cxxabiv1::__array_type_info::~__array_type_info());
	//REG_FUNC(0xFDC450D4, __cxxabiv1::__array_type_info::~__array_type_info());
	//REG_FUNC(0x5CCFD0C0, __cxxabiv1::__class_type_info::~__class_type_info());
	//REG_FUNC(0xFBBFFF15, __cxxabiv1::__class_type_info::~__class_type_info());
	//REG_FUNC(0xA92DD3D2, __cxxabiv1::__class_type_info::~__class_type_info());
	//REG_FUNC(0x6C14868D, __cxxabiv1::__pbase_type_info::~__pbase_type_info());
	//REG_FUNC(0xC1869E57, __cxxabiv1::__pbase_type_info::~__pbase_type_info());
	//REG_FUNC(0x2DF92DB7, __cxxabiv1::__pbase_type_info::~__pbase_type_info());
	//REG_FUNC(0xA9654DFD, __cxxabiv1::__pointer_type_info::~__pointer_type_info());
	//REG_FUNC(0x703A2C05, __cxxabiv1::__pointer_type_info::~__pointer_type_info());
	//REG_FUNC(0x509AAD21, __cxxabiv1::__pointer_type_info::~__pointer_type_info());
	//REG_FUNC(0xB7DFB274, __cxxabiv1::__function_type_info::~__function_type_info());
	//REG_FUNC(0x19EA26FF, __cxxabiv1::__function_type_info::~__function_type_info());
	//REG_FUNC(0xF882187E, __cxxabiv1::__function_type_info::~__function_type_info());
	//REG_FUNC(0xE67722C3, __cxxabiv1::__si_class_type_info::~__si_class_type_info());
	//REG_FUNC(0xA7E25E3E, __cxxabiv1::__si_class_type_info::~__si_class_type_info());
	//REG_FUNC(0xACD6D901, __cxxabiv1::__si_class_type_info::~__si_class_type_info());
	//REG_FUNC(0x986F12C7, __cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info());
	//REG_FUNC(0x4B5BC979, __cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info());
	//REG_FUNC(0xA7B9AB93, __cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info());
	//REG_FUNC(0x7436C981, __cxxabiv1::__fundamental_type_info::~__fundamental_type_info());
	//REG_FUNC(0x4EFBF43A, __cxxabiv1::__fundamental_type_info::~__fundamental_type_info());
	//REG_FUNC(0xF49AA0D3, __cxxabiv1::__fundamental_type_info::~__fundamental_type_info());
	//REG_FUNC(0x6199ACC9, __cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info());
	//REG_FUNC(0xDD076510, __cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info());
	//REG_FUNC(0xD4C11B17, __cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info());
	//REG_FUNC(0xBF90A45A, _PJP_CPP_Copyright);
	//REG_FUNC(0x3B6D9752, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::npos);
	//REG_FUNC(0xA3498140, std::string::npos);
	//REG_FUNC(0x05273EA3, std::_Num_int_base::is_bounded);
	//REG_FUNC(0x8A0994F8, std::_Num_int_base::is_integer);
	//REG_FUNC(0x401F1224, std::_Num_int_base::is_specialized);
	//REG_FUNC(0xA65FE916, std::_Num_int_base::radix);
	//REG_FUNC(0xF2AA872E, std::_Num_int_base::is_exact);
	//REG_FUNC(0x08FE5A4F, std::_Num_int_base::is_modulo);
	//REG_FUNC(0x7D4C55EC, std::numeric_limits<signed char>::digits);
	//REG_FUNC(0xA4E5BF5E, std::numeric_limits<signed char>::digits10);
	//REG_FUNC(0xD9938B84, std::numeric_limits<signed char>::is_signed);
	//REG_FUNC(0x56198D65, std::numeric_limits<bool>::digits);
	//REG_FUNC(0xF52E5F76, std::numeric_limits<bool>::digits10);
	//REG_FUNC(0x81B82E0E, std::numeric_limits<bool>::is_modulo);
	//REG_FUNC(0x9E6D2025, std::numeric_limits<bool>::is_signed);
	//REG_FUNC(0x810ED593, std::numeric_limits<char>::digits);
	//REG_FUNC(0x0AC1A819, std::numeric_limits<char>::digits10);
	//REG_FUNC(0x660E14E1, std::numeric_limits<char>::is_signed);
	//REG_FUNC(0x3EEB3B23, std::numeric_limits<double>::max_exponent);
	//REG_FUNC(0x13B634BE, std::numeric_limits<double>::min_exponent);
	//REG_FUNC(0xDB4218A0, std::numeric_limits<double>::max_exponent10);
	//REG_FUNC(0x770B1CAC, std::numeric_limits<double>::min_exponent10);
	//REG_FUNC(0xD175A556, std::numeric_limits<double>::digits);
	//REG_FUNC(0xA5349445, std::numeric_limits<double>::digits10);
	//REG_FUNC(0x2F59E7FF, std::numeric_limits<long double>::max_exponent);
	//REG_FUNC(0xC9C10644, std::numeric_limits<long double>::min_exponent);
	//REG_FUNC(0xC80072AC, std::numeric_limits<long double>::max_exponent10);
	//REG_FUNC(0xCA8B1B9E, std::numeric_limits<long double>::min_exponent10);
	//REG_FUNC(0x7E9AFD39, std::numeric_limits<long double>::digits);
	//REG_FUNC(0x6122F9BF, std::numeric_limits<long double>::digits10);
	//REG_FUNC(0xA83B5FE2, std::numeric_limits<float>::max_exponent);
	//REG_FUNC(0x9347B146, std::numeric_limits<float>::min_exponent);
	//REG_FUNC(0x371BCFA6, std::numeric_limits<float>::max_exponent10);
	//REG_FUNC(0x6E6746EB, std::numeric_limits<float>::min_exponent10);
	//REG_FUNC(0xB102353D, std::numeric_limits<float>::digits);
	//REG_FUNC(0x781201BB, std::numeric_limits<float>::digits10);
	//REG_FUNC(0x26D618B8, std::numeric_limits<unsigned char>::digits);
	//REG_FUNC(0x8D593267, std::numeric_limits<unsigned char>::digits10);
	//REG_FUNC(0x96B86E89, std::numeric_limits<unsigned char>::is_signed);
	//REG_FUNC(0x9CDAA1F0, std::numeric_limits<int>::digits);
	//REG_FUNC(0xE8EB3133, std::numeric_limits<int>::digits10);
	//REG_FUNC(0x3AB38CDA, std::numeric_limits<int>::is_signed);
	//REG_FUNC(0xEEB7B642, std::numeric_limits<unsigned int>::digits);
	//REG_FUNC(0xBCDE68B3, std::numeric_limits<unsigned int>::digits10);
	//REG_FUNC(0x0DA8EFB0, std::numeric_limits<unsigned int>::is_signed);
	//REG_FUNC(0x65DAD8D6, std::numeric_limits<long>::digits);
	//REG_FUNC(0xFB52BC0A, std::numeric_limits<long>::digits10);
	//REG_FUNC(0x063544FC, std::numeric_limits<long>::is_signed);
	//REG_FUNC(0x441D097A, std::numeric_limits<unsigned long>::digits);
	//REG_FUNC(0xB56F1B07, std::numeric_limits<unsigned long>::digits10);
	//REG_FUNC(0xA9799886, std::numeric_limits<unsigned long>::is_signed);
	//REG_FUNC(0x45C6A036, std::numeric_limits<short>::digits);
	//REG_FUNC(0xCDE02D9C, std::numeric_limits<short>::digits10);
	//REG_FUNC(0xB13AEAC3, std::numeric_limits<short>::is_signed);
	//REG_FUNC(0xBD813100, std::numeric_limits<unsigned short>::digits);
	//REG_FUNC(0x242C5313, std::numeric_limits<unsigned short>::digits10);
	//REG_FUNC(0x175A29B4, std::numeric_limits<unsigned short>::is_signed);
	//REG_FUNC(0x7E91BCD7, std::numeric_limits<wchar_t>::digits);
	//REG_FUNC(0x6B1CB79E, std::numeric_limits<wchar_t>::digits10);
	//REG_FUNC(0x9181475F, std::numeric_limits<wchar_t>::is_signed);
	//REG_FUNC(0x22F8FF46, std::numeric_limits<long long>::digits);
	//REG_FUNC(0xF6E69A0D, std::numeric_limits<long long>::digits10);
	//REG_FUNC(0xD01E5E34, std::numeric_limits<long long>::is_signed);
	//REG_FUNC(0x4AB058B0, std::numeric_limits<unsigned long long>::digits);
	//REG_FUNC(0x85F2F2D2, std::numeric_limits<unsigned long long>::digits10);
	//REG_FUNC(0xDEDE9061, std::numeric_limits<unsigned long long>::is_signed);
	//REG_FUNC(0x1CBE5DCB, std::_Num_float_base::has_denorm);
	//REG_FUNC(0x616E0E6F, std::_Num_float_base::is_bounded);
	//REG_FUNC(0xDFDE8E2C, std::_Num_float_base::is_integer);
	//REG_FUNC(0x59668916, std::_Num_float_base::round_style);
	//REG_FUNC(0x2FA7A240, std::_Num_float_base::has_infinity);
	//REG_FUNC(0x4E98DCA0, std::_Num_float_base::has_quiet_NaN);
	//REG_FUNC(0x87EB5304, std::_Num_float_base::is_specialized);
	//REG_FUNC(0x1B36956D, std::_Num_float_base::has_denorm_loss);
	//REG_FUNC(0xD3E2D87B, std::_Num_float_base::tinyness_before);
	//REG_FUNC(0xBCEB9093, std::_Num_float_base::has_signaling_NaN);
	//REG_FUNC(0x132F3288, std::_Num_float_base::radix);
	//REG_FUNC(0xF8060433, std::_Num_float_base::traps);
	//REG_FUNC(0x3C4A2891, std::_Num_float_base::is_exact);
	//REG_FUNC(0xA3F55094, std::_Num_float_base::is_iec559);
	//REG_FUNC(0xC8CB7207, std::_Num_float_base::is_modulo);
	//REG_FUNC(0x1242E399, std::_Num_float_base::is_signed);
	//REG_FUNC(0x762C3159, std::fpos<std::_Mbstatet>::_Stz);
	//REG_FUNC(0xFED4A09B, std::_Iosb<int>::_Noreplace);
	//REG_FUNC(0xE615A657, std::_Iosb<int>::in);
	//REG_FUNC(0x759FD02E, std::_Iosb<int>::app);
	//REG_FUNC(0x6F410A00, std::_Iosb<int>::ate);
	//REG_FUNC(0xD2A42D0C, std::_Iosb<int>::beg);
	//REG_FUNC(0x09B45C3B, std::_Iosb<int>::cur);
	//REG_FUNC(0x121A8952, std::_Iosb<int>::dec);
	//REG_FUNC(0x7CC027CD, std::_Iosb<int>::end);
	//REG_FUNC(0x6E2FF90B, std::_Iosb<int>::hex);
	//REG_FUNC(0xB4A55C29, std::_Iosb<int>::oct);
	//REG_FUNC(0x2CB2DC70, std::_Iosb<int>::out);
	//REG_FUNC(0x078E34A9, std::_Iosb<int>::trunc);
	//REG_FUNC(0xB5EFA1B3, std::_Iosb<int>::badbit);
	//REG_FUNC(0x5312A538, std::_Iosb<int>::binary);
	//REG_FUNC(0xD9D32526, std::_Iosb<int>::skipws);
	//REG_FUNC(0xAE6CA555, std::_Iosb<int>::failbit);
	//REG_FUNC(0x139E2D21, std::_Iosb<int>::goodbit);
	//REG_FUNC(0x7021DFF0, std::_Iosb<int>::unitbuf);
	//REG_FUNC(0x2AD61AAD, std::_Iosb<int>::_Nocreate);
	//REG_FUNC(0x60B16E4E, std::_Iosb<int>::basefield);
	//REG_FUNC(0x8137F8D7, std::_Winit::_Init_cnt);
	//REG_FUNC(0x554B7625, std::ios_base::Init::_Init_cnt);
	//REG_FUNC(0x57CF916C, std::ios_base::_Sync);
	//REG_FUNC(0xF2D3416A, std::ios_base::_Index);
	//REG_FUNC(0x3D219F98, std::_Num_base::has_denorm);
	//REG_FUNC(0xD93E4A6C, std::_Num_base::is_bounded);
	//REG_FUNC(0xB65169EF, std::_Num_base::is_integer);
	//REG_FUNC(0x13B38354, std::_Num_base::round_style);
	//REG_FUNC(0xB11D20E2, std::_Num_base::has_infinity);
	//REG_FUNC(0x3E169F74, std::_Num_base::max_exponent);
	//REG_FUNC(0xD7C041E0, std::_Num_base::min_exponent);
	//REG_FUNC(0x02DA0D59, std::_Num_base::has_quiet_NaN);
	//REG_FUNC(0xBE06BD79, std::_Num_base::is_specialized);
	//REG_FUNC(0xEBBC4DDD, std::_Num_base::max_exponent10);
	//REG_FUNC(0x0FFCF7FC, std::_Num_base::min_exponent10);
	//REG_FUNC(0xB317DDDF, std::_Num_base::has_denorm_loss);
	//REG_FUNC(0x245D399E, std::_Num_base::tinyness_before);
	//REG_FUNC(0xBD5F0B8A, std::_Num_base::has_signaling_NaN);
	//REG_FUNC(0xE23BAE9E, std::_Num_base::radix);
	//REG_FUNC(0x9237A154, std::_Num_base::traps);
	//REG_FUNC(0xE8421A12, std::_Num_base::digits);
	//REG_FUNC(0x80698934, std::_Num_base::digits10);
	//REG_FUNC(0xB338C222, std::_Num_base::is_exact);
	//REG_FUNC(0x1F5A7860, std::_Num_base::is_iec559);
	//REG_FUNC(0x840107AA, std::_Num_base::is_modulo);
	//REG_FUNC(0xABD7AE16, std::_Num_base::is_signed);
	//REG_FUNC(0x4A1AB5B4, std::_Raise_handler);
	//REG_FUNC(0x725EAC50, std::__dummy_typeinfo);
	//REG_FUNC(0x768F2944, std::cin);
	//REG_FUNC(0xD9478DCF, std::_Fpz);
	//REG_FUNC(0x14B35A37, std::cerr);
	//REG_FUNC(0xD361A52A, std::clog);
	//REG_FUNC(0xB3867BB4, std::cout);
	//REG_FUNC(0x8054BC8E, std::wcin);
	//REG_FUNC(0x8B2001F7, std::wcerr);
	//REG_FUNC(0x8E04C18C, std::wclog);
	//REG_FUNC(0x4F726424, std::wcout);
	//REG_FUNC(0x9C449444, std::_BADOFF);
	//REG_FUNC(0xBFEF56B5, std::nothrow);
	//REG_FUNC(0xDC18EF42, typeinfo for __simd64_int8_t);
	//REG_FUNC(0x2207D305, typeinfo for __simd128_int8_t);
	//REG_FUNC(0x869FEDA9, typeinfo for __simd64_int16_t);
	//REG_FUNC(0x7CEF3DB5, typeinfo for __simd64_int32_t);
	//REG_FUNC(0xFE09AD25, typeinfo for __simd64_poly8_t);
	//REG_FUNC(0x14A3598E, typeinfo for __simd64_uint8_t);
	//REG_FUNC(0xF4B098DD, typeinfo for __simd128_int16_t);
	//REG_FUNC(0xAABF056C, typeinfo for __simd128_int32_t);
	//REG_FUNC(0x305068B1, typeinfo for __simd128_poly8_t);
	//REG_FUNC(0x74813D4D, typeinfo for __simd128_uint8_t);
	//REG_FUNC(0xE118AB78, typeinfo for __simd64_poly16_t);
	//REG_FUNC(0x67E05799, typeinfo for __simd64_uint16_t);
	//REG_FUNC(0x1617E8CB, typeinfo for __simd64_uint32_t);
	//REG_FUNC(0x2FACB1EF, typeinfo for __simd128_poly16_t);
	//REG_FUNC(0xC089FED3, typeinfo for __simd128_uint16_t);
	//REG_FUNC(0xFC00EC48, typeinfo for __simd128_uint32_t);
	//REG_FUNC(0x237AF69B, typeinfo for __simd64_float16_t);
	//REG_FUNC(0xF7FDBBED, typeinfo for __simd64_float32_t);
	//REG_FUNC(0x525557F3, typeinfo for __simd128_float16_t);
	//REG_FUNC(0xA4018B84, typeinfo for __simd128_float32_t);
	//REG_FUNC(0xA1FE4058, typeinfo for half);
	//REG_FUNC(0x5351829B, typeinfo for std::ios_base::failure);
	//REG_FUNC(0x00AC6C8F, typeinfo for __simd64_int8_t*);
	//REG_FUNC(0xD5B056B8, typeinfo for __simd128_int8_t*);
	//REG_FUNC(0x13975DAE, typeinfo for __simd64_int16_t*);
	//REG_FUNC(0x963C04E3, typeinfo for __simd64_int32_t*);
	//REG_FUNC(0x9F43A559, typeinfo for __simd64_poly8_t*);
	//REG_FUNC(0xD8079FA9, typeinfo for __simd64_uint8_t*);
	//REG_FUNC(0xEF53FE1F, typeinfo for __simd128_int16_t*);
	//REG_FUNC(0xA5094302, typeinfo for __simd128_int32_t*);
	//REG_FUNC(0x9CAF5E5A, typeinfo for __simd128_poly8_t*);
	//REG_FUNC(0x264B0978, typeinfo for __simd128_uint8_t*);
	//REG_FUNC(0x214A0488, typeinfo for __simd64_poly16_t*);
	//REG_FUNC(0xA96D02B1, typeinfo for __simd64_uint16_t*);
	//REG_FUNC(0xEE862280, typeinfo for __simd64_uint32_t*);
	//REG_FUNC(0xB5CEC4FF, typeinfo for __simd128_poly16_t*);
	//REG_FUNC(0x46124E82, typeinfo for __simd128_uint16_t*);
	//REG_FUNC(0x07E6CC17, typeinfo for __simd128_uint32_t*);
	//REG_FUNC(0x588EBCAD, typeinfo for __simd64_float16_t*);
	//REG_FUNC(0xDFCB2417, typeinfo for __simd64_float32_t*);
	//REG_FUNC(0x9502D3C0, typeinfo for __simd128_float16_t*);
	//REG_FUNC(0xFB84796C, typeinfo for __simd128_float32_t*);
	//REG_FUNC(0xA43ABF14, typeinfo for half*);
	//REG_FUNC(0x37A74E46, typeinfo for __simd64_int8_t const*);
	//REG_FUNC(0x60D7D920, typeinfo for __simd128_int8_t const*);
	//REG_FUNC(0x52A04C47, typeinfo for __simd64_int16_t const*);
	//REG_FUNC(0xBB64CCF1, typeinfo for __simd64_int32_t const*);
	//REG_FUNC(0x7C9D0C33, typeinfo for __simd64_poly8_t const*);
	//REG_FUNC(0x021A57A1, typeinfo for __simd64_uint8_t const*);
	//REG_FUNC(0x021E3DD1, typeinfo for __simd128_int16_t const*);
	//REG_FUNC(0xFF8DDBE7, typeinfo for __simd128_int32_t const*);
	//REG_FUNC(0xB30AB3B5, typeinfo for __simd128_poly8_t const*);
	//REG_FUNC(0xC8721E86, typeinfo for __simd128_uint8_t const*);
	//REG_FUNC(0x610983B7, typeinfo for __simd64_poly16_t const*);
	//REG_FUNC(0x486A3970, typeinfo for __simd64_uint16_t const*);
	//REG_FUNC(0x9577D4FD, typeinfo for __simd64_uint32_t const*);
	//REG_FUNC(0x192861D3, typeinfo for __simd128_poly16_t const*);
	//REG_FUNC(0x9C721F27, typeinfo for __simd128_uint16_t const*);
	//REG_FUNC(0xC0A37F8F, typeinfo for __simd128_uint32_t const*);
	//REG_FUNC(0xF2FCDEFC, typeinfo for __simd64_float16_t const*);
	//REG_FUNC(0x2D2B93F7, typeinfo for __simd64_float32_t const*);
	//REG_FUNC(0x6B7DA1FD, typeinfo for __simd128_float16_t const*);
	//REG_FUNC(0x15CA84E1, typeinfo for __simd128_float32_t const*);
	//REG_FUNC(0x6195F016, typeinfo for half const*);
	//REG_FUNC(0x2059F4C0, typeinfo for long long __vector const*);
	//REG_FUNC(0xFCC4EE61, typeinfo for unsigned long long __vector const*);
	//REG_FUNC(0x63E0CE97, typeinfo for signed char const*);
	//REG_FUNC(0x47A13017, typeinfo for bool const*);
	//REG_FUNC(0x8C375D81, typeinfo for char const*);
	//REG_FUNC(0x841645BA, typeinfo for double const*);
	//REG_FUNC(0x179015C1, typeinfo for long double const*);
	//REG_FUNC(0xF7F85635, typeinfo for float const*);
	//REG_FUNC(0x54CF62A4, typeinfo for unsigned char const*);
	//REG_FUNC(0x33DAF949, typeinfo for int const*);
	//REG_FUNC(0x703C1962, typeinfo for unsigned int const*);
	//REG_FUNC(0xF353DAF3, typeinfo for long const*);
	//REG_FUNC(0x67092852, typeinfo for unsigned long const*);
	//REG_FUNC(0xDAAEEAD0, typeinfo for short const*);
	//REG_FUNC(0x39790E0A, typeinfo for unsigned short const*);
	//REG_FUNC(0xEE47C447, typeinfo for void const*);
	//REG_FUNC(0xECDB6B05, typeinfo for wchar_t const*);
	//REG_FUNC(0xC20CF55C, typeinfo for long long const*);
	//REG_FUNC(0xA0F5E8F5, typeinfo for unsigned long long const*);
	//REG_FUNC(0xA6C2A25C, typeinfo for long long __vector*);
	//REG_FUNC(0x81B51915, typeinfo for unsigned long long __vector*);
	//REG_FUNC(0xA7CB4EAA, typeinfo for signed char*);
	//REG_FUNC(0x087B0FB6, typeinfo for bool*);
	//REG_FUNC(0xE4D24E14, typeinfo for char*);
	//REG_FUNC(0x6825FFE6, typeinfo for double*);
	//REG_FUNC(0x926B9A3A, typeinfo for long double*);
	//REG_FUNC(0x24072F3E, typeinfo for float*);
	//REG_FUNC(0x08B5247B, typeinfo for unsigned char*);
	//REG_FUNC(0x15C21CC8, typeinfo for int*);
	//REG_FUNC(0xD234CF18, typeinfo for unsigned int*);
	//REG_FUNC(0x50E25810, typeinfo for long*);
	//REG_FUNC(0x9D0DBB1A, typeinfo for unsigned long*);
	//REG_FUNC(0xDCB7CD94, typeinfo for short*);
	//REG_FUNC(0x7FC4B19D, typeinfo for unsigned short*);
	//REG_FUNC(0x4722F2AE, typeinfo for void*);
	//REG_FUNC(0x2208C899, typeinfo for wchar_t*);
	//REG_FUNC(0xE64F5994, typeinfo for long long*);
	//REG_FUNC(0xC1C20AC0, typeinfo for unsigned long long*);
	//REG_FUNC(0xD7A9284F, typeinfo for std::iostream);
	//REG_FUNC(0xE302D51A, typeinfo for std::istream);
	//REG_FUNC(0xF9426257, typeinfo for std::ostream);
	//REG_FUNC(0x7242603B, typeinfo for std::bad_typeid);
	//REG_FUNC(0x67B82DEF, typeinfo for std::istrstream);
	//REG_FUNC(0x9F17589B, typeinfo for std::ostrstream);
	//REG_FUNC(0xE0E3C75A, typeinfo for std::_ctype_base);
	//REG_FUNC(0x87457513, typeinfo for std::logic_error);
	//REG_FUNC(0x2B71045A, typeinfo for std::range_error);
	//REG_FUNC(0x9A72EBFE, typeinfo for std::domain_error);
	//REG_FUNC(0x15E6C91C, typeinfo for std::length_error);
	//REG_FUNC(0xBAC29E4D, typeinfo for std::out_of_range);
	//REG_FUNC(0x8257DFA2, typeinfo for std::strstreambuf);
	//REG_FUNC(0x34455CAF, typeinfo for std::_codecvt_base);
	//REG_FUNC(0xF4A5A537, typeinfo for std::bad_exception);
	//REG_FUNC(0x33C19D3B, typeinfo for std::basic_filebuf<char, std::char_traits<char> >);
	//REG_FUNC(0x83DB8917, typeinfo for std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0x1582929A, typeinfo for std::basic_istream<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0xF4062B77, typeinfo for std::basic_ostream<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0x2451AF0A, typeinfo for std::runtime_error);
	//REG_FUNC(0x3EE22853, typeinfo for std::overflow_error);
	//REG_FUNC(0x758B452B, typeinfo for std::basic_streambuf<char, std::char_traits<char> >);
	//REG_FUNC(0x52B5EC73, typeinfo for std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0xCD0A98ED, typeinfo for std::underflow_error);
	//REG_FUNC(0xA128D5A0, typeinfo for std::invalid_argument);
	//REG_FUNC(0xE2AB6BF9, typeinfo for std::_Iosb<int>);
	//REG_FUNC(0x3FD78B17, typeinfo for std::_ctype<char>);
	//REG_FUNC(0xA8CD5D05, typeinfo for std::_ctype<wchar_t>);
	//REG_FUNC(0xAFB2B7FB, typeinfo for std::_codecvt<char, char, std::_Mbstatet>);
	//REG_FUNC(0xCA25D9BE, typeinfo for std::_codecvt<wchar_t, char, std::_Mbstatet>);
	//REG_FUNC(0xA7CA7C93, typeinfo for std::bad_cast);
	//REG_FUNC(0xB93721C7, typeinfo for std::ios_base);
	//REG_FUNC(0x35E135A0, typeinfo for std::bad_alloc);
	//REG_FUNC(0x7BA61382, typeinfo for std::basic_ios<char, std::char_traits<char> >);
	//REG_FUNC(0x0905B8B0, typeinfo for std::basic_ios<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0x1E8C6100, typeinfo for std::exception);
	//REG_FUNC(0x1CC15F54, typeinfo for std::strstream);
	//REG_FUNC(0x8A026EAD, typeinfo for std::type_info);
	//REG_FUNC(0xE128260C, typeinfo for long long __vector);
	//REG_FUNC(0x44C2FA39, typeinfo for unsigned long long __vector);
	//REG_FUNC(0x4F416B30, typeinfo for signed char);
	//REG_FUNC(0x3081D959, typeinfo for bool);
	//REG_FUNC(0x942D2342, typeinfo for char);
	//REG_FUNC(0x685BA1E8, typeinfo for double);
	//REG_FUNC(0xFCE46A43, typeinfo for long double);
	//REG_FUNC(0x64AEB8AF, typeinfo for float);
	//REG_FUNC(0x606676D4, typeinfo for unsigned char);
	//REG_FUNC(0xA58E84A3, typeinfo for int);
	//REG_FUNC(0x9B0CBEC0, typeinfo for unsigned int);
	//REG_FUNC(0xD589E8AE, typeinfo for long);
	//REG_FUNC(0xD39774A5, typeinfo for unsigned long);
	//REG_FUNC(0xDC2C85B0, typeinfo for short);
	//REG_FUNC(0xEA3FB57B, typeinfo for unsigned short);
	//REG_FUNC(0x76C6BDCE, typeinfo for void);
	//REG_FUNC(0x8BFC9260, typeinfo for wchar_t);
	//REG_FUNC(0x90B0194C, typeinfo for long long);
	//REG_FUNC(0x16DACFBF, typeinfo for unsigned long long);
	//REG_FUNC(0x720678AD, typeinfo name for __simd64_int8_t);
	//REG_FUNC(0x5B9F1D83, typeinfo name for __simd128_int8_t);
	//REG_FUNC(0x953ECE43, typeinfo name for __simd64_int16_t);
	//REG_FUNC(0xCE27612E, typeinfo name for __simd64_int32_t);
	//REG_FUNC(0x72BC6CD9, typeinfo name for __simd64_poly8_t);
	//REG_FUNC(0xCD2802B5, typeinfo name for __simd64_uint8_t);
	//REG_FUNC(0xC3FA8530, typeinfo name for __simd128_int16_t);
	//REG_FUNC(0x67A63A08, typeinfo name for __simd128_int32_t);
	//REG_FUNC(0x6B26EFF8, typeinfo name for __simd128_poly8_t);
	//REG_FUNC(0x08C4C69F, typeinfo name for __simd128_uint8_t);
	//REG_FUNC(0x40BC2E0E, typeinfo name for __simd64_poly16_t);
	//REG_FUNC(0x8D1AE4A7, typeinfo name for __simd64_uint16_t);
	//REG_FUNC(0xC4096952, typeinfo name for __simd64_uint32_t);
	//REG_FUNC(0x16D366F1, typeinfo name for __simd128_poly16_t);
	//REG_FUNC(0x045552A1, typeinfo name for __simd128_uint16_t);
	//REG_FUNC(0x7DBF4FFF, typeinfo name for __simd128_uint32_t);
	//REG_FUNC(0x0ED26DE1, typeinfo name for __simd64_float16_t);
	//REG_FUNC(0xAB0D789A, typeinfo name for __simd64_float32_t);
	//REG_FUNC(0x03200DDB, typeinfo name for __simd128_float16_t);
	//REG_FUNC(0xD54CBD7C, typeinfo name for __simd128_float32_t);
	//REG_FUNC(0xA8E6842E, typeinfo name for half);
	//REG_FUNC(0x5246E71E, typeinfo name for std::ios_base::failure);
	//REG_FUNC(0xF98AAA03, typeinfo name for __simd64_int8_t*);
	//REG_FUNC(0xAF5AA646, typeinfo name for __simd128_int8_t*);
	//REG_FUNC(0x73874089, typeinfo name for __simd64_int16_t*);
	//REG_FUNC(0xAD912141, typeinfo name for __simd64_int32_t*);
	//REG_FUNC(0x67D1351B, typeinfo name for __simd64_poly8_t*);
	//REG_FUNC(0x9FDDB92F, typeinfo name for __simd64_uint8_t*);
	//REG_FUNC(0xA9B31841, typeinfo name for __simd128_int16_t*);
	//REG_FUNC(0x244C742C, typeinfo name for __simd128_int32_t*);
	//REG_FUNC(0x31AFE1A0, typeinfo name for __simd128_poly8_t*);
	//REG_FUNC(0x5CF817B0, typeinfo name for __simd128_uint8_t*);
	//REG_FUNC(0xB524B325, typeinfo name for __simd64_poly16_t*);
	//REG_FUNC(0x51A1F225, typeinfo name for __simd64_uint16_t*);
	//REG_FUNC(0x9C3431DD, typeinfo name for __simd64_uint32_t*);
	//REG_FUNC(0x937A4F2F, typeinfo name for __simd128_poly16_t*);
	//REG_FUNC(0x33549DB5, typeinfo name for __simd128_uint16_t*);
	//REG_FUNC(0xFC19AC06, typeinfo name for __simd128_uint32_t*);
	//REG_FUNC(0xD9A43D3A, typeinfo name for __simd64_float16_t*);
	//REG_FUNC(0xFAB5D659, typeinfo name for __simd64_float32_t*);
	//REG_FUNC(0x7E694471, typeinfo name for __simd128_float16_t*);
	//REG_FUNC(0xA9AF9CE8, typeinfo name for __simd128_float32_t*);
	//REG_FUNC(0xDAE584EC, typeinfo name for half*);
	//REG_FUNC(0x2B017F22, typeinfo name for __simd64_int8_t const*);
	//REG_FUNC(0x4A7149C9, typeinfo name for __simd128_int8_t const*);
	//REG_FUNC(0xAC116166, typeinfo name for __simd64_int16_t const*);
	//REG_FUNC(0x6A472A63, typeinfo name for __simd64_int32_t const*);
	//REG_FUNC(0xC356ACF6, typeinfo name for __simd64_poly8_t const*);
	//REG_FUNC(0x878C75F4, typeinfo name for __simd64_uint8_t const*);
	//REG_FUNC(0x68B777E3, typeinfo name for __simd128_int16_t const*);
	//REG_FUNC(0x061188BD, typeinfo name for __simd128_int32_t const*);
	//REG_FUNC(0xC7733F13, typeinfo name for __simd128_poly8_t const*);
	//REG_FUNC(0x3D8A69EC, typeinfo name for __simd128_uint8_t const*);
	//REG_FUNC(0xCC081D58, typeinfo name for __simd64_poly16_t const*);
	//REG_FUNC(0xEB50ABA7, typeinfo name for __simd64_uint16_t const*);
	//REG_FUNC(0x25EC8CE5, typeinfo name for __simd64_uint32_t const*);
	//REG_FUNC(0x5C61F109, typeinfo name for __simd128_poly16_t const*);
	//REG_FUNC(0x9B085E3F, typeinfo name for __simd128_uint16_t const*);
	//REG_FUNC(0x721902EF, typeinfo name for __simd128_uint32_t const*);
	//REG_FUNC(0x1C618B7E, typeinfo name for __simd64_float16_t const*);
	//REG_FUNC(0x89B6EDD3, typeinfo name for __simd64_float32_t const*);
	//REG_FUNC(0x9BC380FF, typeinfo name for __simd128_float16_t const*);
	//REG_FUNC(0xC951A9C5, typeinfo name for __simd128_float32_t const*);
	//REG_FUNC(0x2796C952, typeinfo name for half const*);
	//REG_FUNC(0xC33238AA, typeinfo name for long long __vector const*);
	//REG_FUNC(0x208CEEA8, typeinfo name for unsigned long long __vector const*);
	//REG_FUNC(0xBAD19257, typeinfo name for signed char const*);
	//REG_FUNC(0x6CB2F5A4, typeinfo name for bool const*);
	//REG_FUNC(0xE242CC59, typeinfo name for char const*);
	//REG_FUNC(0xA0C8CCE9, typeinfo name for double const*);
	//REG_FUNC(0x5C69903D, typeinfo name for long double const*);
	//REG_FUNC(0xDBF8E0D1, typeinfo name for float const*);
	//REG_FUNC(0x1BC277F5, typeinfo name for unsigned char const*);
	//REG_FUNC(0xF09F6E45, typeinfo name for int const*);
	//REG_FUNC(0x5C6D9EDD, typeinfo name for unsigned int const*);
	//REG_FUNC(0x12416EBE, typeinfo name for long const*);
	//REG_FUNC(0x199F6347, typeinfo name for unsigned long const*);
	//REG_FUNC(0xA1D68767, typeinfo name for short const*);
	//REG_FUNC(0xE6498BCD, typeinfo name for unsigned short const*);
	//REG_FUNC(0xF0FF237E, typeinfo name for void const*);
	//REG_FUNC(0xD255293A, typeinfo name for wchar_t const*);
	//REG_FUNC(0x2EADF5EC, typeinfo name for long long const*);
	//REG_FUNC(0xEC3461AB, typeinfo name for unsigned long long const*);
	//REG_FUNC(0xB3EDCB7F, typeinfo name for long long __vector*);
	//REG_FUNC(0x6D11C7D6, typeinfo name for unsigned long long __vector*);
	//REG_FUNC(0xC5AC688C, typeinfo name for signed char*);
	//REG_FUNC(0xE4EB3C43, typeinfo name for bool*);
	//REG_FUNC(0xAEF69715, typeinfo name for char*);
	//REG_FUNC(0x6F81469F, typeinfo name for double*);
	//REG_FUNC(0xFD38BF3B, typeinfo name for long double*);
	//REG_FUNC(0xFCB96733, typeinfo name for float*);
	//REG_FUNC(0x5BFE19AB, typeinfo name for unsigned char*);
	//REG_FUNC(0x187E3B47, typeinfo name for int*);
	//REG_FUNC(0x2F4A5390, typeinfo name for unsigned int*);
	//REG_FUNC(0x651D020E, typeinfo name for long*);
	//REG_FUNC(0x6E4D412D, typeinfo name for unsigned long*);
	//REG_FUNC(0x982D9703, typeinfo name for short*);
	//REG_FUNC(0xE2A0B0A8, typeinfo name for unsigned short*);
	//REG_FUNC(0xF7B6B02A, typeinfo name for void*);
	//REG_FUNC(0xF1C9A755, typeinfo name for wchar_t*);
	//REG_FUNC(0x0968B212, typeinfo name for long long*);
	//REG_FUNC(0x09787CAD, typeinfo name for unsigned long long*);
	//REG_FUNC(0xF86F5756, typeinfo name for std::iostream);
	//REG_FUNC(0x999300E0, typeinfo name for std::istream);
	//REG_FUNC(0x591C25A3, typeinfo name for std::ostream);
	//REG_FUNC(0x0FC9D21B, typeinfo name for std::bad_typeid);
	//REG_FUNC(0x867D109E, typeinfo name for std::istrstream);
	//REG_FUNC(0x88BFC745, typeinfo name for std::ostrstream);
	//REG_FUNC(0xB315CE7A, typeinfo name for std::_ctype_base);
	//REG_FUNC(0xA65DACDF, typeinfo name for std::logic_error);
	//REG_FUNC(0x1B8E7108, typeinfo name for std::range_error);
	//REG_FUNC(0xBE23707A, typeinfo name for std::domain_error);
	//REG_FUNC(0x9E317CE1, typeinfo name for std::length_error);
	//REG_FUNC(0xD8DAD98D, typeinfo name for std::out_of_range);
	//REG_FUNC(0x1C929309, typeinfo name for std::strstreambuf);
	//REG_FUNC(0x0E17E4D6, typeinfo name for std::_codecvt_base);
	//REG_FUNC(0x918FE198, typeinfo name for std::bad_exception);
	//REG_FUNC(0x227B4568, typeinfo name for std::basic_filebuf<char, std::char_traits<char> >);
	//REG_FUNC(0xD34BAF59, typeinfo name for std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0x4381D6B0, typeinfo name for std::basic_istream<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0x8D487027, typeinfo name for std::basic_ostream<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0xCAA9B21D, typeinfo name for std::runtime_error);
	//REG_FUNC(0xA21B1185, typeinfo name for std::overflow_error);
	//REG_FUNC(0x4A1A1314, typeinfo name for std::basic_streambuf<char, std::char_traits<char> >);
	//REG_FUNC(0x26C1C38F, typeinfo name for std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0x140AE4BB, typeinfo name for std::underflow_error);
	//REG_FUNC(0xC3CD5E06, typeinfo name for std::invalid_argument);
	//REG_FUNC(0xB07DF922, typeinfo name for std::_Iosb<int>);
	//REG_FUNC(0xED549839, typeinfo name for std::_ctype<char>);
	//REG_FUNC(0x89304937, typeinfo name for std::_ctype<wchar_t>);
	//REG_FUNC(0x17AAF611, typeinfo name for std::_codecvt<char, char, std::_Mbstatet>);
	//REG_FUNC(0xB4C66A72, typeinfo name for std::_codecvt<wchar_t, char, std::_Mbstatet>);
	//REG_FUNC(0x4C50F26D, typeinfo name for std::bad_cast);
	//REG_FUNC(0xA263F3D5, typeinfo name for std::ios_base);
	//REG_FUNC(0x8DA9C17C, typeinfo name for std::_numpunct<char>);
	//REG_FUNC(0xC4F9C216, typeinfo name for std::_numpunct<wchar_t>);
	//REG_FUNC(0xDF0FFCD2, typeinfo name for std::bad_alloc);
	//REG_FUNC(0xB37BE412, typeinfo name for std::basic_ios<char, std::char_traits<char> >);
	//REG_FUNC(0xCA50ACCA, typeinfo name for std::basic_ios<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0x45FD9715, typeinfo name for std::exception);
	//REG_FUNC(0xE5C789D4, typeinfo name for std::strstream);
	//REG_FUNC(0x2856DCD6, typeinfo name for std::type_info);
	//REG_FUNC(0x75A1CED4, typeinfo name for long long __vector);
	//REG_FUNC(0x508FF61E, typeinfo name for unsigned long long __vector);
	//REG_FUNC(0x08E6A51A, typeinfo name for signed char);
	//REG_FUNC(0x491DB7D3, typeinfo name for bool);
	//REG_FUNC(0xD657B5A0, typeinfo name for char);
	//REG_FUNC(0x322C7CB5, typeinfo name for double);
	//REG_FUNC(0x596C02C7, typeinfo name for long double);
	//REG_FUNC(0x2434A5DD, typeinfo name for float);
	//REG_FUNC(0x890DE9E8, typeinfo name for unsigned char);
	//REG_FUNC(0x4B9F21DF, typeinfo name for int);
	//REG_FUNC(0x4C2D1984, typeinfo name for unsigned int);
	//REG_FUNC(0x46E67574, typeinfo name for long);
	//REG_FUNC(0xEE238074, typeinfo name for unsigned long);
	//REG_FUNC(0x8C9CDB9C, typeinfo name for short);
	//REG_FUNC(0xED2E996A, typeinfo name for unsigned short);
	//REG_FUNC(0xD4744378, typeinfo name for void);
	//REG_FUNC(0x2C50C827, typeinfo name for wchar_t);
	//REG_FUNC(0x9574359B, typeinfo name for long long);
	//REG_FUNC(0x402717E4, typeinfo name for unsigned long long);
	//REG_FUNC(0x51B29810, VTT for std::iostream);
	//REG_FUNC(0x52128B13, VTT for std::istream);
	//REG_FUNC(0x3C508708, VTT for std::ostream);
	//REG_FUNC(0x087753F6, VTT for std::istrstream);
	//REG_FUNC(0xE3D7CB30, VTT for std::ostrstream);
	//REG_FUNC(0xBC326B50, VTT for std::basic_istream<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0x16E32018, VTT for std::basic_ostream<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0xC91F7671, VTT for std::strstream);
	//REG_FUNC(0x648213CC, vtable for std::ios_base::failure);
	//REG_FUNC(0x796EA5C0, vtable for std::iostream);
	//REG_FUNC(0xC5D326CB, _ZTVSd__St9strstream);
	//REG_FUNC(0xB02CB03C, vtable for std::istream);
	//REG_FUNC(0xF4400A94, _ZTVSiSd__St9strstream);
	//REG_FUNC(0xF2A1132D, _ZTVSi__Sd);
	//REG_FUNC(0xDFF04427, _ZTVSi__St10istrstream);
	//REG_FUNC(0xD430E6D2, vtable for std::ostream);
	//REG_FUNC(0x3CAA5F50, _ZTVSoSd__St9strstream);
	//REG_FUNC(0x6D6BCA93, _ZTVSo__Sd);
	//REG_FUNC(0xBA833AE3, _ZTVSo__Sd__St9strstream);
	//REG_FUNC(0x65069CB5, _ZTVSo__St10ostrstream);
	//REG_FUNC(0x76BDD7CC, vtable for std::bad_typeid);
	//REG_FUNC(0xFBACB296, vtable for std::istrstream);
	//REG_FUNC(0xA81AD21D, vtable for std::ostrstream);
	//REG_FUNC(0x82A84E5E, vtable for std::logic_error);
	//REG_FUNC(0x1D583475, vtable for std::range_error);
	//REG_FUNC(0x80C77E16, vtable for std::domain_error);
	//REG_FUNC(0x064ADA35, vtable for std::length_error);
	//REG_FUNC(0xDDAE7CBE, vtable for std::out_of_range);
	//REG_FUNC(0x11B2781A, vtable for std::strstreambuf);
	//REG_FUNC(0x75D16BD0, vtable for std::_codecvt_base);
	//REG_FUNC(0x4AA9C954, vtable for std::bad_exception);
	//REG_FUNC(0xC3233C50, vtable for std::basic_filebuf<char, std::char_traits<char> >);
	//REG_FUNC(0xF269A8EB, vtable for std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0xB952752B, vtable for std::basic_istream<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0x48F3405B, vtable for std::basic_ostream<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0x53F02A18, vtable for std::runtime_error);
	//REG_FUNC(0x177FCCDC, vtable for std::overflow_error);
	//REG_FUNC(0x05548FF7, vtable for std::basic_streambuf<char, std::char_traits<char> >);
	//REG_FUNC(0xE8A9F32E, vtable for std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0x515AE097, vtable for std::underflow_error);
	//REG_FUNC(0x23EEDAF0, vtable for std::invalid_argument);
	//REG_FUNC(0x214E1395, vtable for std::_ctype<char>);
	//REG_FUNC(0x798E7C29, vtable for std::_ctype<wchar_t>);
	//REG_FUNC(0x9B3E5D29, vtable for std::_codecvt<char, char, std::_Mbstatet>);
	//REG_FUNC(0x95405266, vtable for std::_codecvt<wchar_t, char, std::_Mbstatet>);
	//REG_FUNC(0xAA09FD32, vtable for std::bad_cast);
	//REG_FUNC(0xD58C5F52, vtable for std::ios_base);
	//REG_FUNC(0xA27EFBA3, vtable for std::bad_alloc);
	//REG_FUNC(0x147996ED, vtable for std::basic_ios<char, std::char_traits<char> >);
	//REG_FUNC(0x0DE4AFE9, _ZTVSt9basic_iosIcSt11char_traitsIcEE__Sd__St9strstream);
	//REG_FUNC(0x87D18300, _ZTVSt9basic_iosIcSt11char_traitsIcEE__SiSd__St9strstream);
	//REG_FUNC(0x3D6A38D3, _ZTVSt9basic_iosIcSt11char_traitsIcEE__Si__Sd);
	//REG_FUNC(0xA8E795AF, _ZTVSt9basic_iosIcSt11char_traitsIcEE__Si__St10istrstream);
	//REG_FUNC(0xB7CD4C0E, _ZTVSt9basic_iosIcSt11char_traitsIcEE__SoSd__St9strstream);
	//REG_FUNC(0x21FDA8D0, _ZTVSt9basic_iosIcSt11char_traitsIcEE__So__Sd);
	//REG_FUNC(0xA8AAEABA, _ZTVSt9basic_iosIcSt11char_traitsIcEE__So__St10ostrstream);
	//REG_FUNC(0xCC03F184, vtable for std::basic_ios<wchar_t, std::char_traits<wchar_t> >);
	//REG_FUNC(0xBC97F7D6, vtable for std::exception);
	//REG_FUNC(0xFD21E1F1, vtable for std::strstream);
	//REG_FUNC(0x8E9879A7, vtable for std::type_info);
	//REG_FUNC(0xE63750C1, std::basic_filebuf<char, std::char_traits<char> >::_Init(std::_Dnk_filet*, std::basic_filebuf<char, std::char_traits<char> >::_Initfl)::_Stinit);
	//REG_FUNC(0x1D4E29BC, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_Init(std::_Dnk_filet*, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_Initfl)::_Stinit);
	//REG_FUNC(0x08A37475, typeinfo for __cxxabiv1::__enum_type_info);
	//REG_FUNC(0x66CC7DBB, typeinfo for __cxxabiv1::__array_type_info);
	//REG_FUNC(0x81C44513, typeinfo for __cxxabiv1::__class_type_info);
	//REG_FUNC(0xC35024DA, typeinfo for __cxxabiv1::__pbase_type_info);
	//REG_FUNC(0x835E9E78, typeinfo for __cxxabiv1::__pointer_type_info);
	//REG_FUNC(0x62941235, typeinfo for __cxxabiv1::__function_type_info);
	//REG_FUNC(0x461E17F0, typeinfo for __cxxabiv1::__si_class_type_info);
	//REG_FUNC(0xB80BFF06, typeinfo for __cxxabiv1::__vmi_class_type_info);
	//REG_FUNC(0x7373F517, typeinfo for __cxxabiv1::__fundamental_type_info);
	//REG_FUNC(0xDF23E7B5, typeinfo for __cxxabiv1::__pointer_to_member_type_info);
	//REG_FUNC(0x74F19FF2, typeinfo name for __cxxabiv1::__enum_type_info);
	//REG_FUNC(0x9BF7C72D, typeinfo name for __cxxabiv1::__array_type_info);
	//REG_FUNC(0xCB5063F1, typeinfo name for __cxxabiv1::__class_type_info);
	//REG_FUNC(0x4F5C24A6, typeinfo name for __cxxabiv1::__pbase_type_info);
	//REG_FUNC(0x832019EE, typeinfo name for __cxxabiv1::__pointer_type_info);
	//REG_FUNC(0xFB8956D8, typeinfo name for __cxxabiv1::__function_type_info);
	//REG_FUNC(0xEAC164EC, typeinfo name for __cxxabiv1::__si_class_type_info);
	//REG_FUNC(0x4106109E, typeinfo name for __cxxabiv1::__vmi_class_type_info);
	//REG_FUNC(0x1FD93E3A, typeinfo name for __cxxabiv1::__fundamental_type_info);
	//REG_FUNC(0xB64B4F55, typeinfo name for __cxxabiv1::__pointer_to_member_type_info);
	//REG_FUNC(0x4937B673, vtable for __cxxabiv1::__enum_type_info);
	//REG_FUNC(0x9383FBD6, vtable for __cxxabiv1::__array_type_info);
	//REG_FUNC(0xF79AE8E1, vtable for __cxxabiv1::__class_type_info);
	//REG_FUNC(0xFEAD4BDA, vtable for __cxxabiv1::__pbase_type_info);
	//REG_FUNC(0xAA57484D, vtable for __cxxabiv1::__pointer_type_info);
	//REG_FUNC(0x897B54E3, vtable for __cxxabiv1::__function_type_info);
	//REG_FUNC(0x6BC74629, vtable for __cxxabiv1::__si_class_type_info);
	//REG_FUNC(0x7321E731, vtable for __cxxabiv1::__vmi_class_type_info);
	//REG_FUNC(0x33836375, vtable for __cxxabiv1::__fundamental_type_info);
	//REG_FUNC(0x94664DEB, vtable for __cxxabiv1::__pointer_to_member_type_info);
});

/*
// original names

REG_FUNC(0x173E7421, __aeabi_unwind_cpp_pr0);
REG_FUNC(0x52B0C625, _ZNKSt10bad_typeid4whatEv);
REG_FUNC(0x64D7D074, _ZNKSt10bad_typeid8_DoraiseEv);
REG_FUNC(0x15FB88E2, _ZNKSt11logic_error4whatEv);
REG_FUNC(0x492D1209, _ZNKSt11logic_error8_DoraiseEv);
REG_FUNC(0xDBDFF9D0, _ZNKSt11range_error8_DoraiseEv);
REG_FUNC(0xE8D59AB5, _ZNKSt12_String_base5_XlenEv);
REG_FUNC(0x473DC636, _ZNKSt12_String_base5_XranEv);
REG_FUNC(0x481ECB76, _ZNKSt12domain_error8_DoraiseEv);
REG_FUNC(0xB03E909C, _ZNKSt12length_error8_DoraiseEv);
REG_FUNC(0x38CF41AC, _ZNKSt12out_of_range8_DoraiseEv);
REG_FUNC(0x55AE5502, _ZNKSt13_codecvt_base11do_encodingEv);
REG_FUNC(0x5522293F, _ZNKSt13_codecvt_base13do_max_lengthEv);
REG_FUNC(0xCF5643A9, _ZNKSt13_codecvt_base16do_always_noconvEv);
REG_FUNC(0x51FCD56B, _ZNKSt13bad_exception4whatEv);
REG_FUNC(0x109E54C9, _ZNKSt13bad_exception8_DoraiseEv);
REG_FUNC(0xAE85C2EE, _ZNKSt13runtime_error4whatEv);
REG_FUNC(0x1D878503, _ZNKSt13runtime_error8_DoraiseEv);
REG_FUNC(0xEED101C6, _ZNKSt14overflow_error8_DoraiseEv);
REG_FUNC(0xB1AE6F9E, _ZNKSt15underflow_error8_DoraiseEv);
REG_FUNC(0x16F56E8D, _ZNKSt16invalid_argument8_DoraiseEv);
REG_FUNC(0x6C568D20, _ZNKSt6_ctypeIcE10do_tolowerEPcPKc);
REG_FUNC(0xC334DE66, _ZNKSt6_ctypeIcE10do_tolowerEc);
REG_FUNC(0x02DD808E, _ZNKSt6_ctypeIcE10do_toupperEPcPKc);
REG_FUNC(0xF6AF33EA, _ZNKSt6_ctypeIcE10do_toupperEc);
REG_FUNC(0x1B81D726, _ZNKSt6_ctypeIcE8do_widenEPKcS2_Pc);
REG_FUNC(0x6471CC01, _ZNKSt6_ctypeIcE8do_widenEc);
REG_FUNC(0x9CFA56E5, _ZNKSt6_ctypeIcE9do_narrowEPKcS2_cPc);
REG_FUNC(0x718669AB, _ZNKSt6_ctypeIcE9do_narrowEcc);
REG_FUNC(0x759F105D, _ZNKSt6_ctypeIwE10do_scan_isEsPKwS2_);
REG_FUNC(0x0056443F, _ZNKSt6_ctypeIwE10do_tolowerEPwPKw);
REG_FUNC(0x33E9ECDD, _ZNKSt6_ctypeIwE10do_tolowerEw);
REG_FUNC(0x1256E6A5, _ZNKSt6_ctypeIwE10do_toupperEPwPKw);
REG_FUNC(0x64072C2E, _ZNKSt6_ctypeIwE10do_toupperEw);
REG_FUNC(0x339766BF, _ZNKSt6_ctypeIwE11do_scan_notEsPKwS2_);
REG_FUNC(0xDA4E1651, _ZNKSt6_ctypeIwE5do_isEPKwS2_Ps);
REG_FUNC(0x5A06C0E8, _ZNKSt6_ctypeIwE5do_isEsw);
REG_FUNC(0x609036C7, _ZNKSt6_ctypeIwE8do_widenEPKcS2_Pw);
REG_FUNC(0xA2896AA8, _ZNKSt6_ctypeIwE8do_widenEc);
REG_FUNC(0x631687B9, _ZNKSt6_ctypeIwE9do_narrowEPKwS2_cPc);
REG_FUNC(0xB4D8D2F0, _ZNKSt6_ctypeIwE9do_narrowEwc);
REG_FUNC(0xD9070137, _ZNKSt8_codecvtIccSt9_MbstatetE10do_unshiftERS0_PcS3_RS3_);
REG_FUNC(0xABA0412F, _ZNKSt8_codecvtIccSt9_MbstatetE5do_inERS0_PKcS4_RS4_PcS6_RS6_);
REG_FUNC(0x51052F04, _ZNKSt8_codecvtIccSt9_MbstatetE6do_outERS0_PKcS4_RS4_PcS6_RS6_);
REG_FUNC(0x39F062BE, _ZNKSt8_codecvtIccSt9_MbstatetE9do_lengthERKS0_PKcS5_j);
REG_FUNC(0xF07CC89F, _ZNKSt8_codecvtIwcSt9_MbstatetE10do_unshiftERS0_PcS3_RS3_);
REG_FUNC(0xF3A2E837, _ZNKSt8_codecvtIwcSt9_MbstatetE11do_encodingEv);
REG_FUNC(0x1F133D1E, _ZNKSt8_codecvtIwcSt9_MbstatetE13do_max_lengthEv);
REG_FUNC(0x27716D17, _ZNKSt8_codecvtIwcSt9_MbstatetE16do_always_noconvEv);
REG_FUNC(0x1C1AFE42, _ZNKSt8_codecvtIwcSt9_MbstatetE5do_inERS0_PKcS4_RS4_PwS6_RS6_);
REG_FUNC(0xCBDE5500, _ZNKSt8_codecvtIwcSt9_MbstatetE6do_outERS0_PKwS4_RS4_PcS6_RS6_);
REG_FUNC(0xF4D38990, _ZNKSt8_codecvtIwcSt9_MbstatetE9do_lengthERKS0_PKcS5_j);
REG_FUNC(0x46A9143F, _ZNKSt8bad_cast4whatEv);
REG_FUNC(0x8D129D3F, _ZNKSt8bad_cast8_DoraiseEv);
REG_FUNC(0xF877F51E, _ZNKSt8ios_base7failure8_DoraiseEv);
REG_FUNC(0x664750EE, _ZNKSt9bad_alloc4whatEv);
REG_FUNC(0xBA89FBE7, _ZNKSt9bad_alloc8_DoraiseEv);
REG_FUNC(0xC133E331, _ZNKSt9exception4whatEv);
REG_FUNC(0x0656BE32, _ZNKSt9exception6_RaiseEv);
REG_FUNC(0x47A5CDA2, _ZNKSt9exception8_DoraiseEv);
REG_FUNC(0xBAE38DF9, _ZNKSt9type_info4nameEv);
REG_FUNC(0x1F260F10, _ZNKSt9type_info6beforeERKS_);
REG_FUNC(0xDB15F0FC, _ZNKSt9type_infoeqERKS_);
REG_FUNC(0x9994F9FE, _ZNKSt9type_infoneERKS_);
REG_FUNC(0x2DA9FCEC, _ZNSdD0Ev);
REG_FUNC(0x6C2D3707, _ZNSdD1Ev);
REG_FUNC(0x9BA8786E, _ZNSiD0Ev);
REG_FUNC(0xD089A7C9, _ZNSiD1Ev);
REG_FUNC(0x3EE0611A, _ZNSoC1EPSt15basic_streambufIcSt11char_traitsIcEEb);
REG_FUNC(0x6489E51D, _ZNSoD0Ev);
REG_FUNC(0xEF21C386, _ZNSoD1Ev);
REG_FUNC(0x10D794D4, _ZNSs5_GrowEjb);
REG_FUNC(0x846D0286, _ZNSs6assignERKSsjj);
REG_FUNC(0x2AF7786D, _ZNSsC1EPKc);
REG_FUNC(0x92F661CF, _ZNSsC1ERKSs);
REG_FUNC(0xECC3B9C2, _ZNSt10bad_typeidC1ERKS_);
REG_FUNC(0x9F4CD196, _ZNSt10bad_typeidC1Ev);
REG_FUNC(0x7AE1631B, _ZNSt10bad_typeidC2ERKS_);
REG_FUNC(0x33377802, _ZNSt10bad_typeidC2Ev);
REG_FUNC(0x2CE020C7, _ZNSt10bad_typeidD0Ev);
REG_FUNC(0x625460B9, _ZNSt10bad_typeidD1Ev);
REG_FUNC(0xB4F5C5A7, _ZNSt10bad_typeidD2Ev);
REG_FUNC(0x55AAD6A6, _ZNSt10bad_typeidaSERKS_);
REG_FUNC(0x9CF31703, _ZNSt10istrstreamD0Ev);
REG_FUNC(0x71D13A36, _ZNSt10istrstreamD1Ev);
REG_FUNC(0xAF5DF8C3, _ZNSt10istrstreamD2Ev);
REG_FUNC(0x0C1E7C7A, _ZNSt10ostrstreamC1EPciNSt5_IosbIiE9_OpenmodeE);
REG_FUNC(0x0C09B290, _ZNSt10ostrstreamC2EPciNSt5_IosbIiE9_OpenmodeE);
REG_FUNC(0x4B8BA644, _ZNSt10ostrstreamD0Ev);
REG_FUNC(0x0E463FB3, _ZNSt10ostrstreamD1Ev);
REG_FUNC(0xA0A34FEF, _ZNSt10ostrstreamD2Ev);
REG_FUNC(0xC9F632FF, _ZNSt11logic_errorC1ERKS_);
REG_FUNC(0xE6356C5C, _ZNSt11logic_errorC2ERKSs);
REG_FUNC(0x6322FEB0, _ZNSt11logic_errorD0Ev);
REG_FUNC(0x35ED9C5A, _ZNSt11logic_errorD1Ev);
REG_FUNC(0x1FFC4420, _ZNSt11logic_errorD2Ev);
REG_FUNC(0x6F6E3A52, _ZNSt11range_errorC1ERKS_);
REG_FUNC(0xFD97D28A, _ZNSt11range_errorD0Ev);
REG_FUNC(0x1C86405F, _ZNSt11range_errorD1Ev);
REG_FUNC(0xEF754EBD, _ZNSt11range_errorD2Ev);
REG_FUNC(0x7D5412EF, _ZNSt12domain_errorC1ERKS_);
REG_FUNC(0x803A7D3E, _ZNSt12domain_errorD0Ev);
REG_FUNC(0xA6BCA2AD, _ZNSt12domain_errorD1Ev);
REG_FUNC(0x036F9D2A, _ZNSt12domain_errorD2Ev);
REG_FUNC(0x5F3428AD, _ZNSt12length_errorC1ERKS_);
REG_FUNC(0xF6FB801D, _ZNSt12length_errorC1ERKSs);
REG_FUNC(0xF83AA7DA, _ZNSt12length_errorD0Ev);
REG_FUNC(0xA873D7F9, _ZNSt12length_errorD1Ev);
REG_FUNC(0x0BB12C75, _ZNSt12length_errorD2Ev);
REG_FUNC(0x299AA587, _ZNSt12out_of_rangeC1ERKS_);
REG_FUNC(0xC8BA5522, _ZNSt12out_of_rangeC1ERKSs);
REG_FUNC(0xA8C470A4, _ZNSt12out_of_rangeD0Ev);
REG_FUNC(0x5FAE79BF, _ZNSt12out_of_rangeD1Ev);
REG_FUNC(0x7908CBAB, _ZNSt12out_of_rangeD2Ev);
REG_FUNC(0xDCCE6368, _ZNSt12strstreambuf5_InitEiPcS0_i);
REG_FUNC(0xD85AE271, _ZNSt12strstreambuf5_TidyEv);
REG_FUNC(0xD189E6CC, _ZNSt12strstreambuf6freezeEb);
REG_FUNC(0xFA6BDF33, _ZNSt12strstreambuf7seekoffElNSt5_IosbIiE8_SeekdirENS1_9_OpenmodeE);
REG_FUNC(0x97A9813A, _ZNSt12strstreambuf7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE);
REG_FUNC(0xED2539E2, _ZNSt12strstreambuf8overflowEi);
REG_FUNC(0xC725F896, _ZNSt12strstreambuf9pbackfailEi);
REG_FUNC(0xA9F4FABF, _ZNSt12strstreambuf9underflowEv);
REG_FUNC(0x1C887DDE, _ZNSt12strstreambufD0Ev);
REG_FUNC(0x29E1E930, _ZNSt12strstreambufD1Ev);
REG_FUNC(0x0A140889, _ZNSt12strstreambufD2Ev);
REG_FUNC(0xA8FE6FC4, _ZNSt13_codecvt_baseD0Ev);
REG_FUNC(0xB0E47AE4, _ZNSt13_codecvt_baseD1Ev);
REG_FUNC(0xB7EE9CC2, _ZNSt13bad_exceptionC1ERKS_);
REG_FUNC(0xD719280E, _ZNSt13bad_exceptionC1Ev);
REG_FUNC(0x37D2017F, _ZNSt13bad_exceptionC2ERKS_);
REG_FUNC(0x3DE54D83, _ZNSt13bad_exceptionC2Ev);
REG_FUNC(0xC7880D1A, _ZNSt13bad_exceptionD0Ev);
REG_FUNC(0x486B59CE, _ZNSt13bad_exceptionD1Ev);
REG_FUNC(0xD04E0BAB, _ZNSt13bad_exceptionD2Ev);
REG_FUNC(0x792097AA, _ZNSt13bad_exceptionaSERKS_);
REG_FUNC(0xCC369863, _ZNSt13basic_filebufIcSt11char_traitsIcEE4syncEv);
REG_FUNC(0xC8BAB41E, _ZNSt13basic_filebufIcSt11char_traitsIcEE5_LockEv);
REG_FUNC(0xD5F03A74, _ZNSt13basic_filebufIcSt11char_traitsIcEE5uflowEv);
REG_FUNC(0x413E813E, _ZNSt13basic_filebufIcSt11char_traitsIcEE6setbufEPci);
REG_FUNC(0x9D193B65, _ZNSt13basic_filebufIcSt11char_traitsIcEE7_UnlockEv);
REG_FUNC(0x52E47FB5, _ZNSt13basic_filebufIcSt11char_traitsIcEE7seekoffElNSt5_IosbIiE8_SeekdirENS4_9_OpenmodeE);
REG_FUNC(0x0E119B37, _ZNSt13basic_filebufIcSt11char_traitsIcEE7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE);
REG_FUNC(0x616754BC, _ZNSt13basic_filebufIcSt11char_traitsIcEE8overflowEi);
REG_FUNC(0xCD5BD2E1, _ZNSt13basic_filebufIcSt11char_traitsIcEE9_EndwriteEv);
REG_FUNC(0xFC1C7F3A, _ZNSt13basic_filebufIcSt11char_traitsIcEE9pbackfailEi);
REG_FUNC(0x31693B42, _ZNSt13basic_filebufIcSt11char_traitsIcEE9underflowEv);
REG_FUNC(0xC2F03DFD, _ZNSt13basic_filebufIcSt11char_traitsIcEED0Ev);
REG_FUNC(0x54A77A0D, _ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev);
REG_FUNC(0x253888BD, _ZNSt13basic_filebufIwSt11char_traitsIwEE4syncEv);
REG_FUNC(0x4EC524DC, _ZNSt13basic_filebufIwSt11char_traitsIwEE5_LockEv);
REG_FUNC(0xE777348C, _ZNSt13basic_filebufIwSt11char_traitsIwEE5uflowEv);
REG_FUNC(0x1E1E8BBF, _ZNSt13basic_filebufIwSt11char_traitsIwEE6setbufEPwi);
REG_FUNC(0x281D0191, _ZNSt13basic_filebufIwSt11char_traitsIwEE7_UnlockEv);
REG_FUNC(0x9C87B03F, _ZNSt13basic_filebufIwSt11char_traitsIwEE7seekoffElNSt5_IosbIiE8_SeekdirENS4_9_OpenmodeE);
REG_FUNC(0x8021D69B, _ZNSt13basic_filebufIwSt11char_traitsIwEE7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE);
REG_FUNC(0xD8127E0A, _ZNSt13basic_filebufIwSt11char_traitsIwEE8overflowEj);
REG_FUNC(0x99FDEB76, _ZNSt13basic_filebufIwSt11char_traitsIwEE9_EndwriteEv);
REG_FUNC(0x950786D7, _ZNSt13basic_filebufIwSt11char_traitsIwEE9pbackfailEj);
REG_FUNC(0x572A65D3, _ZNSt13basic_filebufIwSt11char_traitsIwEE9underflowEv);
REG_FUNC(0x96D09EA4, _ZNSt13basic_filebufIwSt11char_traitsIwEED0Ev);
REG_FUNC(0xD434F085, _ZNSt13basic_filebufIwSt11char_traitsIwEED1Ev);
REG_FUNC(0xFFFA683E, _ZNSt13basic_istreamIwSt11char_traitsIwEED0Ev);
REG_FUNC(0xB58839C5, _ZNSt13basic_istreamIwSt11char_traitsIwEED1Ev);
REG_FUNC(0x9BF8855B, _ZNSt13basic_ostreamIwSt11char_traitsIwEEC1EPSt15basic_streambufIwS1_Eb);
REG_FUNC(0x0D74F56E, _ZNSt13basic_ostreamIwSt11char_traitsIwEED0Ev);
REG_FUNC(0x9B831B60, _ZNSt13basic_ostreamIwSt11char_traitsIwEED1Ev);
REG_FUNC(0x396337CE, _ZNSt13runtime_errorC1ERKS_);
REG_FUNC(0xDAD26367, _ZNSt13runtime_errorD0Ev);
REG_FUNC(0x7F1FDAEA, _ZNSt13runtime_errorD1Ev);
REG_FUNC(0xECC19AEB, _ZNSt13runtime_errorD2Ev);
REG_FUNC(0xE67F3768, _ZNSt14overflow_errorC1ERKS_);
REG_FUNC(0xF7C46A5D, _ZNSt14overflow_errorD0Ev);
REG_FUNC(0x5C666F7E, _ZNSt14overflow_errorD1Ev);
REG_FUNC(0x4E45F680, _ZNSt14overflow_errorD2Ev);
REG_FUNC(0x626515E3, _ZNSt15basic_streambufIcSt11char_traitsIcEE4syncEv);
REG_FUNC(0x2E55F15A, _ZNSt15basic_streambufIcSt11char_traitsIcEE5_LockEv);
REG_FUNC(0x0F8535AB, _ZNSt15basic_streambufIcSt11char_traitsIcEE5uflowEv);
REG_FUNC(0xD7933D06, _ZNSt15basic_streambufIcSt11char_traitsIcEE6setbufEPci);
REG_FUNC(0xB8BCCC8D, _ZNSt15basic_streambufIcSt11char_traitsIcEE6xsgetnEPci);
REG_FUNC(0x43E5D0F1, _ZNSt15basic_streambufIcSt11char_traitsIcEE6xsputnEPKci);
REG_FUNC(0x149B193A, _ZNSt15basic_streambufIcSt11char_traitsIcEE7_UnlockEv);
REG_FUNC(0x600998EC, _ZNSt15basic_streambufIcSt11char_traitsIcEE7seekoffElNSt5_IosbIiE8_SeekdirENS4_9_OpenmodeE);
REG_FUNC(0x01DEFFD6, _ZNSt15basic_streambufIcSt11char_traitsIcEE7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE);
REG_FUNC(0xF5F44352, _ZNSt15basic_streambufIcSt11char_traitsIcEE8overflowEi);
REG_FUNC(0xCA79344F, _ZNSt15basic_streambufIcSt11char_traitsIcEE9pbackfailEi);
REG_FUNC(0x441788B1, _ZNSt15basic_streambufIcSt11char_traitsIcEE9showmanycEv);
REG_FUNC(0x797DAE94, _ZNSt15basic_streambufIcSt11char_traitsIcEE9underflowEv);
REG_FUNC(0x074AD52E, _ZNSt15basic_streambufIcSt11char_traitsIcEED0Ev);
REG_FUNC(0xE449E2BF, _ZNSt15basic_streambufIcSt11char_traitsIcEED1Ev);
REG_FUNC(0x09FAA0AA, _ZNSt15basic_streambufIwSt11char_traitsIwEE4syncEv);
REG_FUNC(0xA596C88C, _ZNSt15basic_streambufIwSt11char_traitsIwEE5_LockEv);
REG_FUNC(0x373C2CD8, _ZNSt15basic_streambufIwSt11char_traitsIwEE5uflowEv);
REG_FUNC(0x3F363796, _ZNSt15basic_streambufIwSt11char_traitsIwEE6setbufEPwi);
REG_FUNC(0xABE96E40, _ZNSt15basic_streambufIwSt11char_traitsIwEE6xsgetnEPwi);
REG_FUNC(0x506D0DAE, _ZNSt15basic_streambufIwSt11char_traitsIwEE6xsputnEPKwi);
REG_FUNC(0xBD378207, _ZNSt15basic_streambufIwSt11char_traitsIwEE7_UnlockEv);
REG_FUNC(0x924BD940, _ZNSt15basic_streambufIwSt11char_traitsIwEE7seekoffElNSt5_IosbIiE8_SeekdirENS4_9_OpenmodeE);
REG_FUNC(0x2CD1C1AF, _ZNSt15basic_streambufIwSt11char_traitsIwEE7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE);
REG_FUNC(0xB0DD9881, _ZNSt15basic_streambufIwSt11char_traitsIwEE8overflowEj);
REG_FUNC(0xDD04652F, _ZNSt15basic_streambufIwSt11char_traitsIwEE9pbackfailEj);
REG_FUNC(0x9DCBD6A5, _ZNSt15basic_streambufIwSt11char_traitsIwEE9showmanycEv);
REG_FUNC(0xC3892DE5, _ZNSt15basic_streambufIwSt11char_traitsIwEE9underflowEv);
REG_FUNC(0x8DFACE66, _ZNSt15basic_streambufIwSt11char_traitsIwEED0Ev);
REG_FUNC(0x868E865C, _ZNSt15basic_streambufIwSt11char_traitsIwEED1Ev);
REG_FUNC(0x9A59BC50, _ZNSt15underflow_errorC1ERKS_);
REG_FUNC(0x47A589A4, _ZNSt15underflow_errorD0Ev);
REG_FUNC(0xCED74DE7, _ZNSt15underflow_errorD1Ev);
REG_FUNC(0xA76F038A, _ZNSt15underflow_errorD2Ev);
REG_FUNC(0x6332FA62, _ZNSt16invalid_argumentC1ERKS_);
REG_FUNC(0x188D86CF, _ZNSt16invalid_argumentD0Ev);
REG_FUNC(0x9982A4FC, _ZNSt16invalid_argumentD1Ev);
REG_FUNC(0x1AB2B1AC, _ZNSt16invalid_argumentD2Ev);
REG_FUNC(0xF9FAB558, _ZNSt6_Mutex5_LockEv);
REG_FUNC(0x0402C9F8, _ZNSt6_Mutex7_UnlockEv);
REG_FUNC(0x9DA92617, _ZNSt6_MutexC1ESt14_Uninitialized);
REG_FUNC(0xA4F99AE7, _ZNSt6_MutexC1Ev);
REG_FUNC(0x7B5A6B7F, _ZNSt6_MutexC2ESt14_Uninitialized);
REG_FUNC(0x5C5CD6B9, _ZNSt6_MutexC2Ev);
REG_FUNC(0x9B37CAD9, _ZNSt6_MutexD1Ev);
REG_FUNC(0x3E6A67FE, _ZNSt6_MutexD2Ev);
REG_FUNC(0xABB11CF9, _ZNSt6_WinitC1Ev);
REG_FUNC(0x90DD73C3, _ZNSt6_WinitC2Ev);
REG_FUNC(0x579C349B, _ZNSt6_WinitD1Ev);
REG_FUNC(0x3794ED15, _ZNSt6_WinitD2Ev);
REG_FUNC(0x24DA6258, _ZNSt6_ctypeIcED0Ev);
REG_FUNC(0xF9C92C6A, _ZNSt6_ctypeIcED1Ev);
REG_FUNC(0x554E4742, _ZNSt6_ctypeIwED0Ev);
REG_FUNC(0xD4AEA4D3, _ZNSt6_ctypeIwED1Ev);
REG_FUNC(0x5A7D89F0, _ZNSt8_codecvtIccSt9_MbstatetED0Ev);
REG_FUNC(0xB613F281, _ZNSt8_codecvtIccSt9_MbstatetED1Ev);
REG_FUNC(0x1E11185A, _ZNSt8_codecvtIwcSt9_MbstatetED0Ev);
REG_FUNC(0x14125DF4, _ZNSt8_codecvtIwcSt9_MbstatetED1Ev);
REG_FUNC(0xD2A4428D, _ZNSt8bad_castC1ERKS_);
REG_FUNC(0x7922CC7C, _ZNSt8bad_castC1Ev);
REG_FUNC(0x6DC64647, _ZNSt8bad_castC2ERKS_);
REG_FUNC(0x596BA786, _ZNSt8bad_castC2Ev);
REG_FUNC(0x5416699C, _ZNSt8bad_castD0Ev);
REG_FUNC(0x1D09710D, _ZNSt8bad_castD1Ev);
REG_FUNC(0x3C6B52E7, _ZNSt8bad_castD2Ev);
REG_FUNC(0x95966020, _ZNSt8bad_castaSERKS_);
REG_FUNC(0xF81D3B86, _ZNSt8ios_base17register_callbackEPFvNS_5eventERS_iEi);
REG_FUNC(0x5E60B2B3, _ZNSt8ios_base4InitC1Ev);
REG_FUNC(0x5ED60DEE, _ZNSt8ios_base4InitC2Ev);
REG_FUNC(0x65D88619, _ZNSt8ios_base4InitD1Ev);
REG_FUNC(0x3483E01D, _ZNSt8ios_base4InitD2Ev);
REG_FUNC(0x78CB190E, _ZNSt8ios_base5_InitEv);
REG_FUNC(0x023B8BEE, _ZNSt8ios_base5_TidyEv);
REG_FUNC(0xC9DE8208, _ZNSt8ios_base5clearENSt5_IosbIiE8_IostateEb);
REG_FUNC(0xAA9171FB, _ZNSt8ios_base7_AddstdEv);
REG_FUNC(0x0FC58778, _ZNSt8ios_base7copyfmtERKS_);
REG_FUNC(0x2DF76755, _ZNSt8ios_base7failureC1ERKS0_);
REG_FUNC(0x094048F7, _ZNSt8ios_base7failureC1ERKSs);
REG_FUNC(0x20AAAB95, _ZNSt8ios_base7failureD0Ev);
REG_FUNC(0x31D0197A, _ZNSt8ios_base7failureD1Ev);
REG_FUNC(0x7736E940, _ZNSt8ios_base8_CallfnsENS_5eventE);
REG_FUNC(0xE8C4640A, _ZNSt8ios_base8_FindarrEi);
REG_FUNC(0xB8CFFB8D, _ZNSt8ios_baseD0Ev);
REG_FUNC(0x40EA90D5, _ZNSt8ios_baseD1Ev);
REG_FUNC(0xDCE89E71, _ZNSt8ios_baseD2Ev);
REG_FUNC(0xE15EEC2A, _ZNSt9bad_allocC1ERKS_);
REG_FUNC(0xEC3804D2, _ZNSt9bad_allocC1Ev);
REG_FUNC(0x6AF75467, _ZNSt9bad_allocC2ERKS_);
REG_FUNC(0x57096162, _ZNSt9bad_allocC2Ev);
REG_FUNC(0xB2DAA408, _ZNSt9bad_allocD0Ev);
REG_FUNC(0x07AEE736, _ZNSt9bad_allocD1Ev);
REG_FUNC(0xA9E9B7B7, _ZNSt9bad_allocD2Ev);
REG_FUNC(0x7853E8E5, _ZNSt9bad_allocaSERKS_);
REG_FUNC(0xF78468EB, _ZNSt9basic_iosIcSt11char_traitsIcEED0Ev);
REG_FUNC(0x03150182, _ZNSt9basic_iosIcSt11char_traitsIcEED1Ev);
REG_FUNC(0x9654168A, _ZNSt9basic_iosIwSt11char_traitsIwEED0Ev);
REG_FUNC(0x8FFB8524, _ZNSt9basic_iosIwSt11char_traitsIwEED1Ev);
REG_FUNC(0x7AF1BB16, _ZNSt9exception18_Set_raise_handlerEPFvRKS_E);
REG_FUNC(0x8C5A4417, _ZNSt9exceptionC1ERKS_);
REG_FUNC(0xFC169D71, _ZNSt9exceptionC1Ev);
REG_FUNC(0x59758E74, _ZNSt9exceptionC2ERKS_);
REG_FUNC(0x00E08376, _ZNSt9exceptionC2Ev);
REG_FUNC(0x82EEA67E, _ZNSt9exceptionD0Ev);
REG_FUNC(0x30405D88, _ZNSt9exceptionD1Ev);
REG_FUNC(0xAF7A7081, _ZNSt9exceptionD2Ev);
REG_FUNC(0x6CE63118, _ZNSt9exceptionaSERKS_);
REG_FUNC(0x911F5A80, _ZNSt9strstreamC1EPciNSt5_IosbIiE9_OpenmodeE);
REG_FUNC(0x27166DDA, _ZNSt9strstreamC2EPciNSt5_IosbIiE9_OpenmodeE);
REG_FUNC(0xC4099868, _ZNSt9strstreamD0Ev);
REG_FUNC(0x98BD8AE1, _ZNSt9strstreamD1Ev);
REG_FUNC(0x7D8DFE43, _ZNSt9strstreamD2Ev);
REG_FUNC(0x8D4B1A13, _ZNSt9type_infoD0Ev);
REG_FUNC(0xBD786240, _ZNSt9type_infoD1Ev);
REG_FUNC(0x00C04303, _ZNSt9type_infoD2Ev);
REG_FUNC(0x9983D8B9, _ZSt10unexpectedv);
REG_FUNC(0x385D19B2, _ZSt11setiosflagsNSt5_IosbIiE9_FmtflagsE);
REG_FUNC(0xD8A78A61, _ZSt12setprecisioni);
REG_FUNC(0x994DDF94, _ZSt13resetiosflagsNSt5_IosbIiE9_FmtflagsE);
REG_FUNC(0x13BAEE11, _ZSt13set_terminatePFvvE);
REG_FUNC(0x644CBAA2, _ZSt14_Debug_messagePKcS0_);
REG_FUNC(0x9B2F0CA6, _ZSt14set_unexpectedPFvvE);
REG_FUNC(0xC107B555, _ZSt15set_new_handlerPFvvE);
REG_FUNC(0x011CEB00, _ZSt18uncaught_exceptionv);
REG_FUNC(0x36282336, _ZSt21__gen_dummy_typeinfosv);
REG_FUNC(0x3622003F, _ZSt4setwi);
REG_FUNC(0x6CAFA8EF, _ZSt6_ThrowRKSt9exception);
REG_FUNC(0xFD276300, _ZSt7_FiopenPKcNSt5_IosbIiE9_OpenmodeEi);
REG_FUNC(0x1419E1DF, _ZSt7_FiopenPKwNSt5_IosbIiE9_OpenmodeEi);
REG_FUNC(0x39587D21, _ZSt7setbasei);
REG_FUNC(0x978EC4DC, _ZSt9terminatev);
REG_FUNC(0x4A804953, _ZThn8_NSdD0Ev);
REG_FUNC(0xABFBB0B4, _ZThn8_NSdD1Ev);
REG_FUNC(0x6577F8FA, _ZThn8_NSt9strstreamD0Ev);
REG_FUNC(0x77812119, _ZThn8_NSt9strstreamD1Ev);
REG_FUNC(0xE4BD5E6A, _ZTv0_n12_NSdD0Ev);
REG_FUNC(0x1081224F, _ZTv0_n12_NSdD1Ev);
REG_FUNC(0x7CC8951D, _ZTv0_n12_NSiD0Ev);
REG_FUNC(0xC46CA5C9, _ZTv0_n12_NSiD1Ev);
REG_FUNC(0x699E7717, _ZTv0_n12_NSoD0Ev);
REG_FUNC(0x41DBA7E0, _ZTv0_n12_NSoD1Ev);
REG_FUNC(0x6FC84131, _ZTv0_n12_NSt10istrstreamD0Ev);
REG_FUNC(0x7B4D8616, _ZTv0_n12_NSt10istrstreamD1Ev);
REG_FUNC(0xD82D58BA, _ZTv0_n12_NSt10ostrstreamD0Ev);
REG_FUNC(0x5D4F7F7B, _ZTv0_n12_NSt10ostrstreamD1Ev);
REG_FUNC(0x10E7966F, _ZTv0_n12_NSt13basic_istreamIwSt11char_traitsIwEED0Ev);
REG_FUNC(0xC3718A8D, _ZTv0_n12_NSt13basic_istreamIwSt11char_traitsIwEED1Ev);
REG_FUNC(0x159261D1, _ZTv0_n12_NSt13basic_ostreamIwSt11char_traitsIwEED0Ev);
REG_FUNC(0xB54EC1E5, _ZTv0_n12_NSt13basic_ostreamIwSt11char_traitsIwEED1Ev);
REG_FUNC(0x2FB87ED7, _ZTv0_n12_NSt9strstreamD0Ev);
REG_FUNC(0xECEDE119, _ZTv0_n12_NSt9strstreamD1Ev);
REG_FUNC(0x91B0DC47, _ZdaPv);
REG_FUNC(0xA7241F09, _ZdaPvRKSt9nothrow_t);
REG_FUNC(0x3688FFDA, _ZdaPvS_);
REG_FUNC(0x72293931, _ZdlPv);
REG_FUNC(0x87EF85FF, _ZdlPvRKSt9nothrow_t);
REG_FUNC(0x1EB89099, _ZdlPvS_);
REG_FUNC(0xE7FB2BF4, _Znaj);
REG_FUNC(0x31C62481, _ZnajRKSt9nothrow_t);
REG_FUNC(0xF99ED5AC, _Znwj);
REG_FUNC(0x0AE71DC3, _ZnwjRKSt9nothrow_t);
REG_FUNC(0x1818C323, _SNC_get_global_vars);
REG_FUNC(0x2CFA1F15, _SNC_get_tlocal_vars);
REG_FUNC(0x7742D916, _Unwind_Backtrace);
REG_FUNC(0x32748B78, _Unwind_Complete);
REG_FUNC(0xF6EA5CDE, _Unwind_DeleteException);
REG_FUNC(0xCCD903C4, _Unwind_RaiseException);
REG_FUNC(0x13D5D5A1, _Unwind_Resume);
REG_FUNC(0xE7889A5B, _Unwind_VRS_Get);
REG_FUNC(0xF106D050, _Unwind_VRS_Pop);
REG_FUNC(0x91CDA2F9, _Unwind_VRS_Set);
REG_FUNC(0x173E7421, __aeabi_unwind_cpp_pr0);
REG_FUNC(0x3C78DDE3, __aeabi_unwind_cpp_pr1);
REG_FUNC(0xF95BDD36, __aeabi_unwind_cpp_pr2);
REG_FUNC(0x8C93EFDA, __cxa_allocate_exception);
REG_FUNC(0x6165EE89, __cxa_begin_catch);
REG_FUNC(0x5D74285C, __cxa_begin_cleanup);
REG_FUNC(0x4E4CC399, __cxa_call_terminate);
REG_FUNC(0x7C1A0217, __cxa_call_unexpected);
REG_FUNC(0xF7BF277C, __cxa_current_exception_type);
REG_FUNC(0x3438F773, __cxa_end_catch);
REG_FUNC(0xD7C1E113, __cxa_end_cleanup);
REG_FUNC(0x1FFD5FFF, __cxa_free_exception);
REG_FUNC(0xBFFC0ED7, __cxa_get_exception_ptr);
REG_FUNC(0x96656BBA, __cxa_get_globals);
REG_FUNC(0x21D6C279, __cxa_rethrow);
REG_FUNC(0xF87E6098, __cxa_throw);
REG_FUNC(0x30D908F2, __cxa_type_match);
REG_FUNC(0xAE42C1D5, __snc_personality_v0);
REG_FUNC(0xDD200A6F, _ZN10__cxxabiv116__enum_type_infoD0Ev);
REG_FUNC(0x436D61AD, _ZN10__cxxabiv116__enum_type_infoD1Ev);
REG_FUNC(0x34854DA4, _ZN10__cxxabiv116__enum_type_infoD2Ev);
REG_FUNC(0x9D5EDD21, _ZN10__cxxabiv117__array_type_infoD0Ev);
REG_FUNC(0xD6375908, _ZN10__cxxabiv117__array_type_infoD1Ev);
REG_FUNC(0xFDC450D4, _ZN10__cxxabiv117__array_type_infoD2Ev);
REG_FUNC(0x5CCFD0C0, _ZN10__cxxabiv117__class_type_infoD0Ev);
REG_FUNC(0xFBBFFF15, _ZN10__cxxabiv117__class_type_infoD1Ev);
REG_FUNC(0xA92DD3D2, _ZN10__cxxabiv117__class_type_infoD2Ev);
REG_FUNC(0x6C14868D, _ZN10__cxxabiv117__pbase_type_infoD0Ev);
REG_FUNC(0xC1869E57, _ZN10__cxxabiv117__pbase_type_infoD1Ev);
REG_FUNC(0x2DF92DB7, _ZN10__cxxabiv117__pbase_type_infoD2Ev);
REG_FUNC(0xA9654DFD, _ZN10__cxxabiv119__pointer_type_infoD0Ev);
REG_FUNC(0x703A2C05, _ZN10__cxxabiv119__pointer_type_infoD1Ev);
REG_FUNC(0x509AAD21, _ZN10__cxxabiv119__pointer_type_infoD2Ev);
REG_FUNC(0xB7DFB274, _ZN10__cxxabiv120__function_type_infoD0Ev);
REG_FUNC(0x19EA26FF, _ZN10__cxxabiv120__function_type_infoD1Ev);
REG_FUNC(0xF882187E, _ZN10__cxxabiv120__function_type_infoD2Ev);
REG_FUNC(0xE67722C3, _ZN10__cxxabiv120__si_class_type_infoD0Ev);
REG_FUNC(0xA7E25E3E, _ZN10__cxxabiv120__si_class_type_infoD1Ev);
REG_FUNC(0xACD6D901, _ZN10__cxxabiv120__si_class_type_infoD2Ev);
REG_FUNC(0x986F12C7, _ZN10__cxxabiv121__vmi_class_type_infoD0Ev);
REG_FUNC(0x4B5BC979, _ZN10__cxxabiv121__vmi_class_type_infoD1Ev);
REG_FUNC(0xA7B9AB93, _ZN10__cxxabiv121__vmi_class_type_infoD2Ev);
REG_FUNC(0x7436C981, _ZN10__cxxabiv123__fundamental_type_infoD0Ev);
REG_FUNC(0x4EFBF43A, _ZN10__cxxabiv123__fundamental_type_infoD1Ev);
REG_FUNC(0xF49AA0D3, _ZN10__cxxabiv123__fundamental_type_infoD2Ev);
REG_FUNC(0x6199ACC9, _ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev);
REG_FUNC(0xDD076510, _ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev);
REG_FUNC(0xD4C11B17, _ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev);
REG_FUNC(0xBF90A45A, _PJP_CPP_Copyright);
REG_FUNC(0x3B6D9752, _ZNSbIwSt11char_traitsIwESaIwEE4nposE);
REG_FUNC(0xA3498140, _ZNSs4nposE);
REG_FUNC(0x05273EA3, _ZNSt13_Num_int_base10is_boundedE);
REG_FUNC(0x8A0994F8, _ZNSt13_Num_int_base10is_integerE);
REG_FUNC(0x401F1224, _ZNSt13_Num_int_base14is_specializedE);
REG_FUNC(0xA65FE916, _ZNSt13_Num_int_base5radixE);
REG_FUNC(0xF2AA872E, _ZNSt13_Num_int_base8is_exactE);
REG_FUNC(0x08FE5A4F, _ZNSt13_Num_int_base9is_moduloE);
REG_FUNC(0x7D4C55EC, _ZNSt14numeric_limitsIaE6digitsE);
REG_FUNC(0xA4E5BF5E, _ZNSt14numeric_limitsIaE8digits10E);
REG_FUNC(0xD9938B84, _ZNSt14numeric_limitsIaE9is_signedE);
REG_FUNC(0x56198D65, _ZNSt14numeric_limitsIbE6digitsE);
REG_FUNC(0xF52E5F76, _ZNSt14numeric_limitsIbE8digits10E);
REG_FUNC(0x81B82E0E, _ZNSt14numeric_limitsIbE9is_moduloE);
REG_FUNC(0x9E6D2025, _ZNSt14numeric_limitsIbE9is_signedE);
REG_FUNC(0x810ED593, _ZNSt14numeric_limitsIcE6digitsE);
REG_FUNC(0x0AC1A819, _ZNSt14numeric_limitsIcE8digits10E);
REG_FUNC(0x660E14E1, _ZNSt14numeric_limitsIcE9is_signedE);
REG_FUNC(0x3EEB3B23, _ZNSt14numeric_limitsIdE12max_exponentE);
REG_FUNC(0x13B634BE, _ZNSt14numeric_limitsIdE12min_exponentE);
REG_FUNC(0xDB4218A0, _ZNSt14numeric_limitsIdE14max_exponent10E);
REG_FUNC(0x770B1CAC, _ZNSt14numeric_limitsIdE14min_exponent10E);
REG_FUNC(0xD175A556, _ZNSt14numeric_limitsIdE6digitsE);
REG_FUNC(0xA5349445, _ZNSt14numeric_limitsIdE8digits10E);
REG_FUNC(0x2F59E7FF, _ZNSt14numeric_limitsIeE12max_exponentE);
REG_FUNC(0xC9C10644, _ZNSt14numeric_limitsIeE12min_exponentE);
REG_FUNC(0xC80072AC, _ZNSt14numeric_limitsIeE14max_exponent10E);
REG_FUNC(0xCA8B1B9E, _ZNSt14numeric_limitsIeE14min_exponent10E);
REG_FUNC(0x7E9AFD39, _ZNSt14numeric_limitsIeE6digitsE);
REG_FUNC(0x6122F9BF, _ZNSt14numeric_limitsIeE8digits10E);
REG_FUNC(0xA83B5FE2, _ZNSt14numeric_limitsIfE12max_exponentE);
REG_FUNC(0x9347B146, _ZNSt14numeric_limitsIfE12min_exponentE);
REG_FUNC(0x371BCFA6, _ZNSt14numeric_limitsIfE14max_exponent10E);
REG_FUNC(0x6E6746EB, _ZNSt14numeric_limitsIfE14min_exponent10E);
REG_FUNC(0xB102353D, _ZNSt14numeric_limitsIfE6digitsE);
REG_FUNC(0x781201BB, _ZNSt14numeric_limitsIfE8digits10E);
REG_FUNC(0x26D618B8, _ZNSt14numeric_limitsIhE6digitsE);
REG_FUNC(0x8D593267, _ZNSt14numeric_limitsIhE8digits10E);
REG_FUNC(0x96B86E89, _ZNSt14numeric_limitsIhE9is_signedE);
REG_FUNC(0x9CDAA1F0, _ZNSt14numeric_limitsIiE6digitsE);
REG_FUNC(0xE8EB3133, _ZNSt14numeric_limitsIiE8digits10E);
REG_FUNC(0x3AB38CDA, _ZNSt14numeric_limitsIiE9is_signedE);
REG_FUNC(0xEEB7B642, _ZNSt14numeric_limitsIjE6digitsE);
REG_FUNC(0xBCDE68B3, _ZNSt14numeric_limitsIjE8digits10E);
REG_FUNC(0x0DA8EFB0, _ZNSt14numeric_limitsIjE9is_signedE);
REG_FUNC(0x65DAD8D6, _ZNSt14numeric_limitsIlE6digitsE);
REG_FUNC(0xFB52BC0A, _ZNSt14numeric_limitsIlE8digits10E);
REG_FUNC(0x063544FC, _ZNSt14numeric_limitsIlE9is_signedE);
REG_FUNC(0x441D097A, _ZNSt14numeric_limitsImE6digitsE);
REG_FUNC(0xB56F1B07, _ZNSt14numeric_limitsImE8digits10E);
REG_FUNC(0xA9799886, _ZNSt14numeric_limitsImE9is_signedE);
REG_FUNC(0x45C6A036, _ZNSt14numeric_limitsIsE6digitsE);
REG_FUNC(0xCDE02D9C, _ZNSt14numeric_limitsIsE8digits10E);
REG_FUNC(0xB13AEAC3, _ZNSt14numeric_limitsIsE9is_signedE);
REG_FUNC(0xBD813100, _ZNSt14numeric_limitsItE6digitsE);
REG_FUNC(0x242C5313, _ZNSt14numeric_limitsItE8digits10E);
REG_FUNC(0x175A29B4, _ZNSt14numeric_limitsItE9is_signedE);
REG_FUNC(0x7E91BCD7, _ZNSt14numeric_limitsIwE6digitsE);
REG_FUNC(0x6B1CB79E, _ZNSt14numeric_limitsIwE8digits10E);
REG_FUNC(0x9181475F, _ZNSt14numeric_limitsIwE9is_signedE);
REG_FUNC(0x22F8FF46, _ZNSt14numeric_limitsIxE6digitsE);
REG_FUNC(0xF6E69A0D, _ZNSt14numeric_limitsIxE8digits10E);
REG_FUNC(0xD01E5E34, _ZNSt14numeric_limitsIxE9is_signedE);
REG_FUNC(0x4AB058B0, _ZNSt14numeric_limitsIyE6digitsE);
REG_FUNC(0x85F2F2D2, _ZNSt14numeric_limitsIyE8digits10E);
REG_FUNC(0xDEDE9061, _ZNSt14numeric_limitsIyE9is_signedE);
REG_FUNC(0x1CBE5DCB, _ZNSt15_Num_float_base10has_denormE);
REG_FUNC(0x616E0E6F, _ZNSt15_Num_float_base10is_boundedE);
REG_FUNC(0xDFDE8E2C, _ZNSt15_Num_float_base10is_integerE);
REG_FUNC(0x59668916, _ZNSt15_Num_float_base11round_styleE);
REG_FUNC(0x2FA7A240, _ZNSt15_Num_float_base12has_infinityE);
REG_FUNC(0x4E98DCA0, _ZNSt15_Num_float_base13has_quiet_NaNE);
REG_FUNC(0x87EB5304, _ZNSt15_Num_float_base14is_specializedE);
REG_FUNC(0x1B36956D, _ZNSt15_Num_float_base15has_denorm_lossE);
REG_FUNC(0xD3E2D87B, _ZNSt15_Num_float_base15tinyness_beforeE);
REG_FUNC(0xBCEB9093, _ZNSt15_Num_float_base17has_signaling_NaNE);
REG_FUNC(0x132F3288, _ZNSt15_Num_float_base5radixE);
REG_FUNC(0xF8060433, _ZNSt15_Num_float_base5trapsE);
REG_FUNC(0x3C4A2891, _ZNSt15_Num_float_base8is_exactE);
REG_FUNC(0xA3F55094, _ZNSt15_Num_float_base9is_iec559E);
REG_FUNC(0xC8CB7207, _ZNSt15_Num_float_base9is_moduloE);
REG_FUNC(0x1242E399, _ZNSt15_Num_float_base9is_signedE);
REG_FUNC(0x762C3159, _ZNSt4fposISt9_MbstatetE4_StzE);
REG_FUNC(0xFED4A09B, _ZNSt5_IosbIiE10_NoreplaceE);
REG_FUNC(0xE615A657, _ZNSt5_IosbIiE2inE);
REG_FUNC(0x759FD02E, _ZNSt5_IosbIiE3appE);
REG_FUNC(0x6F410A00, _ZNSt5_IosbIiE3ateE);
REG_FUNC(0xD2A42D0C, _ZNSt5_IosbIiE3begE);
REG_FUNC(0x09B45C3B, _ZNSt5_IosbIiE3curE);
REG_FUNC(0x121A8952, _ZNSt5_IosbIiE3decE);
REG_FUNC(0x7CC027CD, _ZNSt5_IosbIiE3endE);
REG_FUNC(0x6E2FF90B, _ZNSt5_IosbIiE3hexE);
REG_FUNC(0xB4A55C29, _ZNSt5_IosbIiE3octE);
REG_FUNC(0x2CB2DC70, _ZNSt5_IosbIiE3outE);
REG_FUNC(0x078E34A9, _ZNSt5_IosbIiE5truncE);
REG_FUNC(0xB5EFA1B3, _ZNSt5_IosbIiE6badbitE);
REG_FUNC(0x5312A538, _ZNSt5_IosbIiE6binaryE);
REG_FUNC(0xD9D32526, _ZNSt5_IosbIiE6skipwsE);
REG_FUNC(0xAE6CA555, _ZNSt5_IosbIiE7failbitE);
REG_FUNC(0x139E2D21, _ZNSt5_IosbIiE7goodbitE);
REG_FUNC(0x7021DFF0, _ZNSt5_IosbIiE7unitbufE);
REG_FUNC(0x2AD61AAD, _ZNSt5_IosbIiE9_NocreateE);
REG_FUNC(0x60B16E4E, _ZNSt5_IosbIiE9basefieldE);
REG_FUNC(0x8137F8D7, _ZNSt6_Winit9_Init_cntE);
REG_FUNC(0x554B7625, _ZNSt8ios_base4Init9_Init_cntE);
REG_FUNC(0x57CF916C, _ZNSt8ios_base5_SyncE);
REG_FUNC(0xF2D3416A, _ZNSt8ios_base6_IndexE);
REG_FUNC(0x3D219F98, _ZNSt9_Num_base10has_denormE);
REG_FUNC(0xD93E4A6C, _ZNSt9_Num_base10is_boundedE);
REG_FUNC(0xB65169EF, _ZNSt9_Num_base10is_integerE);
REG_FUNC(0x13B38354, _ZNSt9_Num_base11round_styleE);
REG_FUNC(0xB11D20E2, _ZNSt9_Num_base12has_infinityE);
REG_FUNC(0x3E169F74, _ZNSt9_Num_base12max_exponentE);
REG_FUNC(0xD7C041E0, _ZNSt9_Num_base12min_exponentE);
REG_FUNC(0x02DA0D59, _ZNSt9_Num_base13has_quiet_NaNE);
REG_FUNC(0xBE06BD79, _ZNSt9_Num_base14is_specializedE);
REG_FUNC(0xEBBC4DDD, _ZNSt9_Num_base14max_exponent10E);
REG_FUNC(0x0FFCF7FC, _ZNSt9_Num_base14min_exponent10E);
REG_FUNC(0xB317DDDF, _ZNSt9_Num_base15has_denorm_lossE);
REG_FUNC(0x245D399E, _ZNSt9_Num_base15tinyness_beforeE);
REG_FUNC(0xBD5F0B8A, _ZNSt9_Num_base17has_signaling_NaNE);
REG_FUNC(0xE23BAE9E, _ZNSt9_Num_base5radixE);
REG_FUNC(0x9237A154, _ZNSt9_Num_base5trapsE);
REG_FUNC(0xE8421A12, _ZNSt9_Num_base6digitsE);
REG_FUNC(0x80698934, _ZNSt9_Num_base8digits10E);
REG_FUNC(0xB338C222, _ZNSt9_Num_base8is_exactE);
REG_FUNC(0x1F5A7860, _ZNSt9_Num_base9is_iec559E);
REG_FUNC(0x840107AA, _ZNSt9_Num_base9is_moduloE);
REG_FUNC(0xABD7AE16, _ZNSt9_Num_base9is_signedE);
REG_FUNC(0x4A1AB5B4, _ZSt14_Raise_handler);
REG_FUNC(0x725EAC50, _ZSt16__dummy_typeinfo);
REG_FUNC(0x768F2944, _ZSt3cin);
REG_FUNC(0xD9478DCF, _ZSt4_Fpz);
REG_FUNC(0x14B35A37, _ZSt4cerr);
REG_FUNC(0xD361A52A, _ZSt4clog);
REG_FUNC(0xB3867BB4, _ZSt4cout);
REG_FUNC(0x8054BC8E, _ZSt4wcin);
REG_FUNC(0x8B2001F7, _ZSt5wcerr);
REG_FUNC(0x8E04C18C, _ZSt5wclog);
REG_FUNC(0x4F726424, _ZSt5wcout);
REG_FUNC(0x9C449444, _ZSt7_BADOFF);
REG_FUNC(0xBFEF56B5, _ZSt7nothrow);
REG_FUNC(0xDC18EF42, _ZTI15__simd64_int8_t);
REG_FUNC(0x2207D305, _ZTI16__simd128_int8_t);
REG_FUNC(0x869FEDA9, _ZTI16__simd64_int16_t);
REG_FUNC(0x7CEF3DB5, _ZTI16__simd64_int32_t);
REG_FUNC(0xFE09AD25, _ZTI16__simd64_poly8_t);
REG_FUNC(0x14A3598E, _ZTI16__simd64_uint8_t);
REG_FUNC(0xF4B098DD, _ZTI17__simd128_int16_t);
REG_FUNC(0xAABF056C, _ZTI17__simd128_int32_t);
REG_FUNC(0x305068B1, _ZTI17__simd128_poly8_t);
REG_FUNC(0x74813D4D, _ZTI17__simd128_uint8_t);
REG_FUNC(0xE118AB78, _ZTI17__simd64_poly16_t);
REG_FUNC(0x67E05799, _ZTI17__simd64_uint16_t);
REG_FUNC(0x1617E8CB, _ZTI17__simd64_uint32_t);
REG_FUNC(0x2FACB1EF, _ZTI18__simd128_poly16_t);
REG_FUNC(0xC089FED3, _ZTI18__simd128_uint16_t);
REG_FUNC(0xFC00EC48, _ZTI18__simd128_uint32_t);
REG_FUNC(0x237AF69B, _ZTI18__simd64_float16_t);
REG_FUNC(0xF7FDBBED, _ZTI18__simd64_float32_t);
REG_FUNC(0x525557F3, _ZTI19__simd128_float16_t);
REG_FUNC(0xA4018B84, _ZTI19__simd128_float32_t);
REG_FUNC(0xA1FE4058, _ZTIDh);
REG_FUNC(0x5351829B, _ZTINSt8ios_base7failureE);
REG_FUNC(0x00AC6C8F, _ZTIP15__simd64_int8_t);
REG_FUNC(0xD5B056B8, _ZTIP16__simd128_int8_t);
REG_FUNC(0x13975DAE, _ZTIP16__simd64_int16_t);
REG_FUNC(0x963C04E3, _ZTIP16__simd64_int32_t);
REG_FUNC(0x9F43A559, _ZTIP16__simd64_poly8_t);
REG_FUNC(0xD8079FA9, _ZTIP16__simd64_uint8_t);
REG_FUNC(0xEF53FE1F, _ZTIP17__simd128_int16_t);
REG_FUNC(0xA5094302, _ZTIP17__simd128_int32_t);
REG_FUNC(0x9CAF5E5A, _ZTIP17__simd128_poly8_t);
REG_FUNC(0x264B0978, _ZTIP17__simd128_uint8_t);
REG_FUNC(0x214A0488, _ZTIP17__simd64_poly16_t);
REG_FUNC(0xA96D02B1, _ZTIP17__simd64_uint16_t);
REG_FUNC(0xEE862280, _ZTIP17__simd64_uint32_t);
REG_FUNC(0xB5CEC4FF, _ZTIP18__simd128_poly16_t);
REG_FUNC(0x46124E82, _ZTIP18__simd128_uint16_t);
REG_FUNC(0x07E6CC17, _ZTIP18__simd128_uint32_t);
REG_FUNC(0x588EBCAD, _ZTIP18__simd64_float16_t);
REG_FUNC(0xDFCB2417, _ZTIP18__simd64_float32_t);
REG_FUNC(0x9502D3C0, _ZTIP19__simd128_float16_t);
REG_FUNC(0xFB84796C, _ZTIP19__simd128_float32_t);
REG_FUNC(0xA43ABF14, _ZTIPDh);
REG_FUNC(0x37A74E46, _ZTIPK15__simd64_int8_t);
REG_FUNC(0x60D7D920, _ZTIPK16__simd128_int8_t);
REG_FUNC(0x52A04C47, _ZTIPK16__simd64_int16_t);
REG_FUNC(0xBB64CCF1, _ZTIPK16__simd64_int32_t);
REG_FUNC(0x7C9D0C33, _ZTIPK16__simd64_poly8_t);
REG_FUNC(0x021A57A1, _ZTIPK16__simd64_uint8_t);
REG_FUNC(0x021E3DD1, _ZTIPK17__simd128_int16_t);
REG_FUNC(0xFF8DDBE7, _ZTIPK17__simd128_int32_t);
REG_FUNC(0xB30AB3B5, _ZTIPK17__simd128_poly8_t);
REG_FUNC(0xC8721E86, _ZTIPK17__simd128_uint8_t);
REG_FUNC(0x610983B7, _ZTIPK17__simd64_poly16_t);
REG_FUNC(0x486A3970, _ZTIPK17__simd64_uint16_t);
REG_FUNC(0x9577D4FD, _ZTIPK17__simd64_uint32_t);
REG_FUNC(0x192861D3, _ZTIPK18__simd128_poly16_t);
REG_FUNC(0x9C721F27, _ZTIPK18__simd128_uint16_t);
REG_FUNC(0xC0A37F8F, _ZTIPK18__simd128_uint32_t);
REG_FUNC(0xF2FCDEFC, _ZTIPK18__simd64_float16_t);
REG_FUNC(0x2D2B93F7, _ZTIPK18__simd64_float32_t);
REG_FUNC(0x6B7DA1FD, _ZTIPK19__simd128_float16_t);
REG_FUNC(0x15CA84E1, _ZTIPK19__simd128_float32_t);
REG_FUNC(0x6195F016, _ZTIPKDh);
REG_FUNC(0x2059F4C0, _ZTIPKU8__vectorx);
REG_FUNC(0xFCC4EE61, _ZTIPKU8__vectory);
REG_FUNC(0x63E0CE97, _ZTIPKa);
REG_FUNC(0x47A13017, _ZTIPKb);
REG_FUNC(0x8C375D81, _ZTIPKc);
REG_FUNC(0x841645BA, _ZTIPKd);
REG_FUNC(0x179015C1, _ZTIPKe);
REG_FUNC(0xF7F85635, _ZTIPKf);
REG_FUNC(0x54CF62A4, _ZTIPKh);
REG_FUNC(0x33DAF949, _ZTIPKi);
REG_FUNC(0x703C1962, _ZTIPKj);
REG_FUNC(0xF353DAF3, _ZTIPKl);
REG_FUNC(0x67092852, _ZTIPKm);
REG_FUNC(0xDAAEEAD0, _ZTIPKs);
REG_FUNC(0x39790E0A, _ZTIPKt);
REG_FUNC(0xEE47C447, _ZTIPKv);
REG_FUNC(0xECDB6B05, _ZTIPKw);
REG_FUNC(0xC20CF55C, _ZTIPKx);
REG_FUNC(0xA0F5E8F5, _ZTIPKy);
REG_FUNC(0xA6C2A25C, _ZTIPU8__vectorx);
REG_FUNC(0x81B51915, _ZTIPU8__vectory);
REG_FUNC(0xA7CB4EAA, _ZTIPa);
REG_FUNC(0x087B0FB6, _ZTIPb);
REG_FUNC(0xE4D24E14, _ZTIPc);
REG_FUNC(0x6825FFE6, _ZTIPd);
REG_FUNC(0x926B9A3A, _ZTIPe);
REG_FUNC(0x24072F3E, _ZTIPf);
REG_FUNC(0x08B5247B, _ZTIPh);
REG_FUNC(0x15C21CC8, _ZTIPi);
REG_FUNC(0xD234CF18, _ZTIPj);
REG_FUNC(0x50E25810, _ZTIPl);
REG_FUNC(0x9D0DBB1A, _ZTIPm);
REG_FUNC(0xDCB7CD94, _ZTIPs);
REG_FUNC(0x7FC4B19D, _ZTIPt);
REG_FUNC(0x4722F2AE, _ZTIPv);
REG_FUNC(0x2208C899, _ZTIPw);
REG_FUNC(0xE64F5994, _ZTIPx);
REG_FUNC(0xC1C20AC0, _ZTIPy);
REG_FUNC(0xD7A9284F, _ZTISd);
REG_FUNC(0xE302D51A, _ZTISi);
REG_FUNC(0xF9426257, _ZTISo);
REG_FUNC(0x7242603B, _ZTISt10bad_typeid);
REG_FUNC(0x67B82DEF, _ZTISt10istrstream);
REG_FUNC(0x9F17589B, _ZTISt10ostrstream);
REG_FUNC(0xE0E3C75A, _ZTISt11_ctype_base);
REG_FUNC(0x87457513, _ZTISt11logic_error);
REG_FUNC(0x2B71045A, _ZTISt11range_error);
REG_FUNC(0x9A72EBFE, _ZTISt12domain_error);
REG_FUNC(0x15E6C91C, _ZTISt12length_error);
REG_FUNC(0xBAC29E4D, _ZTISt12out_of_range);
REG_FUNC(0x8257DFA2, _ZTISt12strstreambuf);
REG_FUNC(0x34455CAF, _ZTISt13_codecvt_base);
REG_FUNC(0xF4A5A537, _ZTISt13bad_exception);
REG_FUNC(0x33C19D3B, _ZTISt13basic_filebufIcSt11char_traitsIcEE);
REG_FUNC(0x83DB8917, _ZTISt13basic_filebufIwSt11char_traitsIwEE);
REG_FUNC(0x1582929A, _ZTISt13basic_istreamIwSt11char_traitsIwEE);
REG_FUNC(0xF4062B77, _ZTISt13basic_ostreamIwSt11char_traitsIwEE);
REG_FUNC(0x2451AF0A, _ZTISt13runtime_error);
REG_FUNC(0x3EE22853, _ZTISt14overflow_error);
REG_FUNC(0x758B452B, _ZTISt15basic_streambufIcSt11char_traitsIcEE);
REG_FUNC(0x52B5EC73, _ZTISt15basic_streambufIwSt11char_traitsIwEE);
REG_FUNC(0xCD0A98ED, _ZTISt15underflow_error);
REG_FUNC(0xA128D5A0, _ZTISt16invalid_argument);
REG_FUNC(0xE2AB6BF9, _ZTISt5_IosbIiE);
REG_FUNC(0x3FD78B17, _ZTISt6_ctypeIcE);
REG_FUNC(0xA8CD5D05, _ZTISt6_ctypeIwE);
REG_FUNC(0xAFB2B7FB, _ZTISt8_codecvtIccSt9_MbstatetE);
REG_FUNC(0xCA25D9BE, _ZTISt8_codecvtIwcSt9_MbstatetE);
REG_FUNC(0xA7CA7C93, _ZTISt8bad_cast);
REG_FUNC(0xB93721C7, _ZTISt8ios_base);
REG_FUNC(0x35E135A0, _ZTISt9bad_alloc);
REG_FUNC(0x7BA61382, _ZTISt9basic_iosIcSt11char_traitsIcEE);
REG_FUNC(0x0905B8B0, _ZTISt9basic_iosIwSt11char_traitsIwEE);
REG_FUNC(0x1E8C6100, _ZTISt9exception);
REG_FUNC(0x1CC15F54, _ZTISt9strstream);
REG_FUNC(0x8A026EAD, _ZTISt9type_info);
REG_FUNC(0xE128260C, _ZTIU8__vectorx);
REG_FUNC(0x44C2FA39, _ZTIU8__vectory);
REG_FUNC(0x4F416B30, _ZTIa);
REG_FUNC(0x3081D959, _ZTIb);
REG_FUNC(0x942D2342, _ZTIc);
REG_FUNC(0x685BA1E8, _ZTId);
REG_FUNC(0xFCE46A43, _ZTIe);
REG_FUNC(0x64AEB8AF, _ZTIf);
REG_FUNC(0x606676D4, _ZTIh);
REG_FUNC(0xA58E84A3, _ZTIi);
REG_FUNC(0x9B0CBEC0, _ZTIj);
REG_FUNC(0xD589E8AE, _ZTIl);
REG_FUNC(0xD39774A5, _ZTIm);
REG_FUNC(0xDC2C85B0, _ZTIs);
REG_FUNC(0xEA3FB57B, _ZTIt);
REG_FUNC(0x76C6BDCE, _ZTIv);
REG_FUNC(0x8BFC9260, _ZTIw);
REG_FUNC(0x90B0194C, _ZTIx);
REG_FUNC(0x16DACFBF, _ZTIy);
REG_FUNC(0x720678AD, _ZTS15__simd64_int8_t);
REG_FUNC(0x5B9F1D83, _ZTS16__simd128_int8_t);
REG_FUNC(0x953ECE43, _ZTS16__simd64_int16_t);
REG_FUNC(0xCE27612E, _ZTS16__simd64_int32_t);
REG_FUNC(0x72BC6CD9, _ZTS16__simd64_poly8_t);
REG_FUNC(0xCD2802B5, _ZTS16__simd64_uint8_t);
REG_FUNC(0xC3FA8530, _ZTS17__simd128_int16_t);
REG_FUNC(0x67A63A08, _ZTS17__simd128_int32_t);
REG_FUNC(0x6B26EFF8, _ZTS17__simd128_poly8_t);
REG_FUNC(0x08C4C69F, _ZTS17__simd128_uint8_t);
REG_FUNC(0x40BC2E0E, _ZTS17__simd64_poly16_t);
REG_FUNC(0x8D1AE4A7, _ZTS17__simd64_uint16_t);
REG_FUNC(0xC4096952, _ZTS17__simd64_uint32_t);
REG_FUNC(0x16D366F1, _ZTS18__simd128_poly16_t);
REG_FUNC(0x045552A1, _ZTS18__simd128_uint16_t);
REG_FUNC(0x7DBF4FFF, _ZTS18__simd128_uint32_t);
REG_FUNC(0x0ED26DE1, _ZTS18__simd64_float16_t);
REG_FUNC(0xAB0D789A, _ZTS18__simd64_float32_t);
REG_FUNC(0x03200DDB, _ZTS19__simd128_float16_t);
REG_FUNC(0xD54CBD7C, _ZTS19__simd128_float32_t);
REG_FUNC(0xA8E6842E, _ZTSDh);
REG_FUNC(0x5246E71E, _ZTSNSt8ios_base7failureE);
REG_FUNC(0xF98AAA03, _ZTSP15__simd64_int8_t);
REG_FUNC(0xAF5AA646, _ZTSP16__simd128_int8_t);
REG_FUNC(0x73874089, _ZTSP16__simd64_int16_t);
REG_FUNC(0xAD912141, _ZTSP16__simd64_int32_t);
REG_FUNC(0x67D1351B, _ZTSP16__simd64_poly8_t);
REG_FUNC(0x9FDDB92F, _ZTSP16__simd64_uint8_t);
REG_FUNC(0xA9B31841, _ZTSP17__simd128_int16_t);
REG_FUNC(0x244C742C, _ZTSP17__simd128_int32_t);
REG_FUNC(0x31AFE1A0, _ZTSP17__simd128_poly8_t);
REG_FUNC(0x5CF817B0, _ZTSP17__simd128_uint8_t);
REG_FUNC(0xB524B325, _ZTSP17__simd64_poly16_t);
REG_FUNC(0x51A1F225, _ZTSP17__simd64_uint16_t);
REG_FUNC(0x9C3431DD, _ZTSP17__simd64_uint32_t);
REG_FUNC(0x937A4F2F, _ZTSP18__simd128_poly16_t);
REG_FUNC(0x33549DB5, _ZTSP18__simd128_uint16_t);
REG_FUNC(0xFC19AC06, _ZTSP18__simd128_uint32_t);
REG_FUNC(0xD9A43D3A, _ZTSP18__simd64_float16_t);
REG_FUNC(0xFAB5D659, _ZTSP18__simd64_float32_t);
REG_FUNC(0x7E694471, _ZTSP19__simd128_float16_t);
REG_FUNC(0xA9AF9CE8, _ZTSP19__simd128_float32_t);
REG_FUNC(0xDAE584EC, _ZTSPDh);
REG_FUNC(0x2B017F22, _ZTSPK15__simd64_int8_t);
REG_FUNC(0x4A7149C9, _ZTSPK16__simd128_int8_t);
REG_FUNC(0xAC116166, _ZTSPK16__simd64_int16_t);
REG_FUNC(0x6A472A63, _ZTSPK16__simd64_int32_t);
REG_FUNC(0xC356ACF6, _ZTSPK16__simd64_poly8_t);
REG_FUNC(0x878C75F4, _ZTSPK16__simd64_uint8_t);
REG_FUNC(0x68B777E3, _ZTSPK17__simd128_int16_t);
REG_FUNC(0x061188BD, _ZTSPK17__simd128_int32_t);
REG_FUNC(0xC7733F13, _ZTSPK17__simd128_poly8_t);
REG_FUNC(0x3D8A69EC, _ZTSPK17__simd128_uint8_t);
REG_FUNC(0xCC081D58, _ZTSPK17__simd64_poly16_t);
REG_FUNC(0xEB50ABA7, _ZTSPK17__simd64_uint16_t);
REG_FUNC(0x25EC8CE5, _ZTSPK17__simd64_uint32_t);
REG_FUNC(0x5C61F109, _ZTSPK18__simd128_poly16_t);
REG_FUNC(0x9B085E3F, _ZTSPK18__simd128_uint16_t);
REG_FUNC(0x721902EF, _ZTSPK18__simd128_uint32_t);
REG_FUNC(0x1C618B7E, _ZTSPK18__simd64_float16_t);
REG_FUNC(0x89B6EDD3, _ZTSPK18__simd64_float32_t);
REG_FUNC(0x9BC380FF, _ZTSPK19__simd128_float16_t);
REG_FUNC(0xC951A9C5, _ZTSPK19__simd128_float32_t);
REG_FUNC(0x2796C952, _ZTSPKDh);
REG_FUNC(0xC33238AA, _ZTSPKU8__vectorx);
REG_FUNC(0x208CEEA8, _ZTSPKU8__vectory);
REG_FUNC(0xBAD19257, _ZTSPKa);
REG_FUNC(0x6CB2F5A4, _ZTSPKb);
REG_FUNC(0xE242CC59, _ZTSPKc);
REG_FUNC(0xA0C8CCE9, _ZTSPKd);
REG_FUNC(0x5C69903D, _ZTSPKe);
REG_FUNC(0xDBF8E0D1, _ZTSPKf);
REG_FUNC(0x1BC277F5, _ZTSPKh);
REG_FUNC(0xF09F6E45, _ZTSPKi);
REG_FUNC(0x5C6D9EDD, _ZTSPKj);
REG_FUNC(0x12416EBE, _ZTSPKl);
REG_FUNC(0x199F6347, _ZTSPKm);
REG_FUNC(0xA1D68767, _ZTSPKs);
REG_FUNC(0xE6498BCD, _ZTSPKt);
REG_FUNC(0xF0FF237E, _ZTSPKv);
REG_FUNC(0xD255293A, _ZTSPKw);
REG_FUNC(0x2EADF5EC, _ZTSPKx);
REG_FUNC(0xEC3461AB, _ZTSPKy);
REG_FUNC(0xB3EDCB7F, _ZTSPU8__vectorx);
REG_FUNC(0x6D11C7D6, _ZTSPU8__vectory);
REG_FUNC(0xC5AC688C, _ZTSPa);
REG_FUNC(0xE4EB3C43, _ZTSPb);
REG_FUNC(0xAEF69715, _ZTSPc);
REG_FUNC(0x6F81469F, _ZTSPd);
REG_FUNC(0xFD38BF3B, _ZTSPe);
REG_FUNC(0xFCB96733, _ZTSPf);
REG_FUNC(0x5BFE19AB, _ZTSPh);
REG_FUNC(0x187E3B47, _ZTSPi);
REG_FUNC(0x2F4A5390, _ZTSPj);
REG_FUNC(0x651D020E, _ZTSPl);
REG_FUNC(0x6E4D412D, _ZTSPm);
REG_FUNC(0x982D9703, _ZTSPs);
REG_FUNC(0xE2A0B0A8, _ZTSPt);
REG_FUNC(0xF7B6B02A, _ZTSPv);
REG_FUNC(0xF1C9A755, _ZTSPw);
REG_FUNC(0x0968B212, _ZTSPx);
REG_FUNC(0x09787CAD, _ZTSPy);
REG_FUNC(0xF86F5756, _ZTSSd);
REG_FUNC(0x999300E0, _ZTSSi);
REG_FUNC(0x591C25A3, _ZTSSo);
REG_FUNC(0x0FC9D21B, _ZTSSt10bad_typeid);
REG_FUNC(0x867D109E, _ZTSSt10istrstream);
REG_FUNC(0x88BFC745, _ZTSSt10ostrstream);
REG_FUNC(0xB315CE7A, _ZTSSt11_ctype_base);
REG_FUNC(0xA65DACDF, _ZTSSt11logic_error);
REG_FUNC(0x1B8E7108, _ZTSSt11range_error);
REG_FUNC(0xBE23707A, _ZTSSt12domain_error);
REG_FUNC(0x9E317CE1, _ZTSSt12length_error);
REG_FUNC(0xD8DAD98D, _ZTSSt12out_of_range);
REG_FUNC(0x1C929309, _ZTSSt12strstreambuf);
REG_FUNC(0x0E17E4D6, _ZTSSt13_codecvt_base);
REG_FUNC(0x918FE198, _ZTSSt13bad_exception);
REG_FUNC(0x227B4568, _ZTSSt13basic_filebufIcSt11char_traitsIcEE);
REG_FUNC(0xD34BAF59, _ZTSSt13basic_filebufIwSt11char_traitsIwEE);
REG_FUNC(0x4381D6B0, _ZTSSt13basic_istreamIwSt11char_traitsIwEE);
REG_FUNC(0x8D487027, _ZTSSt13basic_ostreamIwSt11char_traitsIwEE);
REG_FUNC(0xCAA9B21D, _ZTSSt13runtime_error);
REG_FUNC(0xA21B1185, _ZTSSt14overflow_error);
REG_FUNC(0x4A1A1314, _ZTSSt15basic_streambufIcSt11char_traitsIcEE);
REG_FUNC(0x26C1C38F, _ZTSSt15basic_streambufIwSt11char_traitsIwEE);
REG_FUNC(0x140AE4BB, _ZTSSt15underflow_error);
REG_FUNC(0xC3CD5E06, _ZTSSt16invalid_argument);
REG_FUNC(0xB07DF922, _ZTSSt5_IosbIiE);
REG_FUNC(0xED549839, _ZTSSt6_ctypeIcE);
REG_FUNC(0x89304937, _ZTSSt6_ctypeIwE);
REG_FUNC(0x17AAF611, _ZTSSt8_codecvtIccSt9_MbstatetE);
REG_FUNC(0xB4C66A72, _ZTSSt8_codecvtIwcSt9_MbstatetE);
REG_FUNC(0x4C50F26D, _ZTSSt8bad_cast);
REG_FUNC(0xA263F3D5, _ZTSSt8ios_base);
REG_FUNC(0x8DA9C17C, _ZTSSt9_numpunctIcE);
REG_FUNC(0xC4F9C216, _ZTSSt9_numpunctIwE);
REG_FUNC(0xDF0FFCD2, _ZTSSt9bad_alloc);
REG_FUNC(0xB37BE412, _ZTSSt9basic_iosIcSt11char_traitsIcEE);
REG_FUNC(0xCA50ACCA, _ZTSSt9basic_iosIwSt11char_traitsIwEE);
REG_FUNC(0x45FD9715, _ZTSSt9exception);
REG_FUNC(0xE5C789D4, _ZTSSt9strstream);
REG_FUNC(0x2856DCD6, _ZTSSt9type_info);
REG_FUNC(0x75A1CED4, _ZTSU8__vectorx);
REG_FUNC(0x508FF61E, _ZTSU8__vectory);
REG_FUNC(0x08E6A51A, _ZTSa);
REG_FUNC(0x491DB7D3, _ZTSb);
REG_FUNC(0xD657B5A0, _ZTSc);
REG_FUNC(0x322C7CB5, _ZTSd);
REG_FUNC(0x596C02C7, _ZTSe);
REG_FUNC(0x2434A5DD, _ZTSf);
REG_FUNC(0x890DE9E8, _ZTSh);
REG_FUNC(0x4B9F21DF, _ZTSi);
REG_FUNC(0x4C2D1984, _ZTSj);
REG_FUNC(0x46E67574, _ZTSl);
REG_FUNC(0xEE238074, _ZTSm);
REG_FUNC(0x8C9CDB9C, _ZTSs);
REG_FUNC(0xED2E996A, _ZTSt);
REG_FUNC(0xD4744378, _ZTSv);
REG_FUNC(0x2C50C827, _ZTSw);
REG_FUNC(0x9574359B, _ZTSx);
REG_FUNC(0x402717E4, _ZTSy);
REG_FUNC(0x51B29810, _ZTTSd);
REG_FUNC(0x52128B13, _ZTTSi);
REG_FUNC(0x3C508708, _ZTTSo);
REG_FUNC(0x087753F6, _ZTTSt10istrstream);
REG_FUNC(0xE3D7CB30, _ZTTSt10ostrstream);
REG_FUNC(0xBC326B50, _ZTTSt13basic_istreamIwSt11char_traitsIwEE);
REG_FUNC(0x16E32018, _ZTTSt13basic_ostreamIwSt11char_traitsIwEE);
REG_FUNC(0xC91F7671, _ZTTSt9strstream);
REG_FUNC(0x648213CC, _ZTVNSt8ios_base7failureE);
REG_FUNC(0x796EA5C0, _ZTVSd);
REG_FUNC(0xC5D326CB, _ZTVSd__St9strstream);
REG_FUNC(0xB02CB03C, _ZTVSi);
REG_FUNC(0xF4400A94, _ZTVSiSd__St9strstream);
REG_FUNC(0xF2A1132D, _ZTVSi__Sd);
REG_FUNC(0xDFF04427, _ZTVSi__St10istrstream);
REG_FUNC(0xD430E6D2, _ZTVSo);
REG_FUNC(0x3CAA5F50, _ZTVSoSd__St9strstream);
REG_FUNC(0x6D6BCA93, _ZTVSo__Sd);
REG_FUNC(0xBA833AE3, _ZTVSo__Sd__St9strstream);
REG_FUNC(0x65069CB5, _ZTVSo__St10ostrstream);
REG_FUNC(0x76BDD7CC, _ZTVSt10bad_typeid);
REG_FUNC(0xFBACB296, _ZTVSt10istrstream);
REG_FUNC(0xA81AD21D, _ZTVSt10ostrstream);
REG_FUNC(0x82A84E5E, _ZTVSt11logic_error);
REG_FUNC(0x1D583475, _ZTVSt11range_error);
REG_FUNC(0x80C77E16, _ZTVSt12domain_error);
REG_FUNC(0x064ADA35, _ZTVSt12length_error);
REG_FUNC(0xDDAE7CBE, _ZTVSt12out_of_range);
REG_FUNC(0x11B2781A, _ZTVSt12strstreambuf);
REG_FUNC(0x75D16BD0, _ZTVSt13_codecvt_base);
REG_FUNC(0x4AA9C954, _ZTVSt13bad_exception);
REG_FUNC(0xC3233C50, _ZTVSt13basic_filebufIcSt11char_traitsIcEE);
REG_FUNC(0xF269A8EB, _ZTVSt13basic_filebufIwSt11char_traitsIwEE);
REG_FUNC(0xB952752B, _ZTVSt13basic_istreamIwSt11char_traitsIwEE);
REG_FUNC(0x48F3405B, _ZTVSt13basic_ostreamIwSt11char_traitsIwEE);
REG_FUNC(0x53F02A18, _ZTVSt13runtime_error);
REG_FUNC(0x177FCCDC, _ZTVSt14overflow_error);
REG_FUNC(0x05548FF7, _ZTVSt15basic_streambufIcSt11char_traitsIcEE);
REG_FUNC(0xE8A9F32E, _ZTVSt15basic_streambufIwSt11char_traitsIwEE);
REG_FUNC(0x515AE097, _ZTVSt15underflow_error);
REG_FUNC(0x23EEDAF0, _ZTVSt16invalid_argument);
REG_FUNC(0x214E1395, _ZTVSt6_ctypeIcE);
REG_FUNC(0x798E7C29, _ZTVSt6_ctypeIwE);
REG_FUNC(0x9B3E5D29, _ZTVSt8_codecvtIccSt9_MbstatetE);
REG_FUNC(0x95405266, _ZTVSt8_codecvtIwcSt9_MbstatetE);
REG_FUNC(0xAA09FD32, _ZTVSt8bad_cast);
REG_FUNC(0xD58C5F52, _ZTVSt8ios_base);
REG_FUNC(0xA27EFBA3, _ZTVSt9bad_alloc);
REG_FUNC(0x147996ED, _ZTVSt9basic_iosIcSt11char_traitsIcEE);
REG_FUNC(0x0DE4AFE9, _ZTVSt9basic_iosIcSt11char_traitsIcEE__Sd__St9strstream);
REG_FUNC(0x87D18300, _ZTVSt9basic_iosIcSt11char_traitsIcEE__SiSd__St9strstream);
REG_FUNC(0x3D6A38D3, _ZTVSt9basic_iosIcSt11char_traitsIcEE__Si__Sd);
REG_FUNC(0xA8E795AF, _ZTVSt9basic_iosIcSt11char_traitsIcEE__Si__St10istrstream);
REG_FUNC(0xB7CD4C0E, _ZTVSt9basic_iosIcSt11char_traitsIcEE__SoSd__St9strstream);
REG_FUNC(0x21FDA8D0, _ZTVSt9basic_iosIcSt11char_traitsIcEE__So__Sd);
REG_FUNC(0xA8AAEABA, _ZTVSt9basic_iosIcSt11char_traitsIcEE__So__St10ostrstream);
REG_FUNC(0xCC03F184, _ZTVSt9basic_iosIwSt11char_traitsIwEE);
REG_FUNC(0xBC97F7D6, _ZTVSt9exception);
REG_FUNC(0xFD21E1F1, _ZTVSt9strstream);
REG_FUNC(0x8E9879A7, _ZTVSt9type_info);
REG_FUNC(0xE63750C1, _ZZNSt13basic_filebufIcSt11char_traitsIcEE5_InitEPSt10_Dnk_filetNS2_7_InitflEE7_Stinit);
REG_FUNC(0x1D4E29BC, _ZZNSt13basic_filebufIwSt11char_traitsIwEE5_InitEPSt10_Dnk_filetNS2_7_InitflEE7_Stinit);
REG_FUNC(0x08A37475, _ZTIN10__cxxabiv116__enum_type_infoE);
REG_FUNC(0x66CC7DBB, _ZTIN10__cxxabiv117__array_type_infoE);
REG_FUNC(0x81C44513, _ZTIN10__cxxabiv117__class_type_infoE);
REG_FUNC(0xC35024DA, _ZTIN10__cxxabiv117__pbase_type_infoE);
REG_FUNC(0x835E9E78, _ZTIN10__cxxabiv119__pointer_type_infoE);
REG_FUNC(0x62941235, _ZTIN10__cxxabiv120__function_type_infoE);
REG_FUNC(0x461E17F0, _ZTIN10__cxxabiv120__si_class_type_infoE);
REG_FUNC(0xB80BFF06, _ZTIN10__cxxabiv121__vmi_class_type_infoE);
REG_FUNC(0x7373F517, _ZTIN10__cxxabiv123__fundamental_type_infoE);
REG_FUNC(0xDF23E7B5, _ZTIN10__cxxabiv129__pointer_to_member_type_infoE);
REG_FUNC(0x74F19FF2, _ZTSN10__cxxabiv116__enum_type_infoE);
REG_FUNC(0x9BF7C72D, _ZTSN10__cxxabiv117__array_type_infoE);
REG_FUNC(0xCB5063F1, _ZTSN10__cxxabiv117__class_type_infoE);
REG_FUNC(0x4F5C24A6, _ZTSN10__cxxabiv117__pbase_type_infoE);
REG_FUNC(0x832019EE, _ZTSN10__cxxabiv119__pointer_type_infoE);
REG_FUNC(0xFB8956D8, _ZTSN10__cxxabiv120__function_type_infoE);
REG_FUNC(0xEAC164EC, _ZTSN10__cxxabiv120__si_class_type_infoE);
REG_FUNC(0x4106109E, _ZTSN10__cxxabiv121__vmi_class_type_infoE);
REG_FUNC(0x1FD93E3A, _ZTSN10__cxxabiv123__fundamental_type_infoE);
REG_FUNC(0xB64B4F55, _ZTSN10__cxxabiv129__pointer_to_member_type_infoE);
REG_FUNC(0x4937B673, _ZTVN10__cxxabiv116__enum_type_infoE);
REG_FUNC(0x9383FBD6, _ZTVN10__cxxabiv117__array_type_infoE);
REG_FUNC(0xF79AE8E1, _ZTVN10__cxxabiv117__class_type_infoE);
REG_FUNC(0xFEAD4BDA, _ZTVN10__cxxabiv117__pbase_type_infoE);
REG_FUNC(0xAA57484D, _ZTVN10__cxxabiv119__pointer_type_infoE);
REG_FUNC(0x897B54E3, _ZTVN10__cxxabiv120__function_type_infoE);
REG_FUNC(0x6BC74629, _ZTVN10__cxxabiv120__si_class_type_infoE);
REG_FUNC(0x7321E731, _ZTVN10__cxxabiv121__vmi_class_type_infoE);
REG_FUNC(0x33836375, _ZTVN10__cxxabiv123__fundamental_type_infoE);
REG_FUNC(0x94664DEB, _ZTVN10__cxxabiv129__pointer_to_member_type_infoE);
*/
