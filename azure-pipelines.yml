trigger:
  branches:
    include:
      - master
  tags:
    exclude:
      - '*'
pr: none
jobs:
- job: Linux_Build
  strategy:
    matrix:
      Clang:
        COMPILER: clang
      GCC:
        COMPILER: gcc
  variables:
    CCACHE_DIR: $(Pipeline.Workspace)/ccache
    CI_HAS_ARTIFACTS: true
    UPLOAD_COMMIT_HASH: d812f1254a1157c80fd402f94446310560f54e5f
    UPLOAD_REPO_FULL_NAME: "RPCS3/rpcs3-binaries-linux"
    DEPLOY_APPIMAGE: true
    APPDIR: "/rpcs3/build/appdir"
    ARTDIR: "/root/artifacts"
    RELEASE_MESSAGE: "/rpcs3/GitHubReleaseMessage.txt"

  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: Cache@2
    inputs:
      key: ccache | $(Agent.OS) | $(COMPILER)
      path: $(CCACHE_DIR)
    displayName: ccache

  - bash: |
      docker pull --quiet rpcs3/rpcs3-ci-bionic:1.0
      docker run                      \
        -v $(pwd):/rpcs3              \
        --env-file .ci/docker.env \
        -v $CCACHE_DIR:/root/.ccache  \
        -v $BUILD_ARTIFACTSTAGINGDIRECTORY:/root/artifacts \
        rpcs3/rpcs3-ci-bionic:1.0 \
        /rpcs3/.ci/build-linux.sh
    displayName: Docker setup and build

  - publish: $(Build.ArtifactStagingDirectory)
    condition: succeeded()
    artifact: RPCS3 for Linux ($(COMPILER))

  - bash: .ci/github-upload.sh
    condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Repository.Name'], 'RPCS3/rpcs3'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['COMPILER'], 'gcc'))
    displayName: Push build to GitHub
    env:
      RPCS3_TOKEN: $(RPCS3-Token)

- job: Windows_Build
  variables:
    COMPILER: msvc
    QT_VER_MAIN: '5'
    QT_VER: '5.15.2'
    QT_VER_MSVC: 'msvc2019'
    QT_DATE: '202011130602'
    QTDIR: C:\Qt\$(QT_VER)\$(QT_VER_MSVC)_64
    VULKAN_VER: '1.2.154.1'
    VULKAN_SDK_SHA: 'b64471f3a720e649c1fae6535ea83b8c642655ebed1485bfdf15bf4d88f746d9'
    VULKAN_SDK: C:\VulkanSDK\$(VULKAN_VER)
    CACHE_DIR: ./cache
    UPLOAD_COMMIT_HASH: 7d09e3be30805911226241afbb14f8cdc2eb054e
    UPLOAD_REPO_FULL_NAME: "RPCS3/rpcs3-binaries-win"

  pool:
    vmImage: "windows-latest"

  steps:
    - bash: .ci/get_keys-windows.sh
      displayName: Get Cache Keys

    - task: Cache@2
      inputs:
        key: $(Agent.OS) | $(COMPILER) | "$(QT_VER)" | $(VULKAN_SDK_SHA) | llvm.lock | glslang.lock
        path: $(CACHE_DIR)
        restoreKeys: |
          $(Agent.OS) | $(COMPILER)
      displayName: Cache

    - bash: .ci/setup-windows.sh
      displayName: Download and unpack dependencies

    - bash: .ci/export-azure-vars.sh
      displayName: Export Variables

    - task: MSBuild@1
      inputs:
        solution: './Vulkan/spirv-tools-build/spirv-tools-build.vcxproj'
        maximumCpuCount: true
        platform: x64
        configuration: 'Release'
      displayName: Compile SPIRV-Tools

    - task: VSBuild@1
      inputs:
        solution: 'rpcs3.sln'
        maximumCpuCount: true
        platform: x64
        configuration: 'Release'
      displayName: Compile RPCS3

    - bash: .ci/deploy-windows.sh
      displayName: Pack up build artifacts

    - publish: $(Build.ArtifactStagingDirectory)
      condition: succeeded()
      artifact: RPCS3 for Windows

    - bash: .ci/github-upload.sh
      condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Repository.Name'], 'RPCS3/rpcs3'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: Push build to GitHub
      env:
        RPCS3_TOKEN: $(RPCS3-Token)
